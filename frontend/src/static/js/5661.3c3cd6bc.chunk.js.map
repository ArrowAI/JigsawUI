{"version":3,"file":"static/js/5661.3c3cd6bc.chunk.js","mappings":"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","sources":["api/chatflows.js","ui-component/dialog/LoginDialog.js","views/chatbot/index.js"],"sourcesContent":["import client from './client'\n\nconst getAllChatflows = () => client.get('/flows')\n\nconst getSpecificChatflow = (id) => client.get(`/flows/${id}`)\n\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\n\nconst createNewChatflow = (body) => client.post(`/flows`, body)\nconst createNewChatflowVersion = (id,body) => client.post(`/flows/${id}`, body)\n\nconst updateChatflow = (id, body) => client.put(`/flows/${id}`, body)\n\nconst deleteChatflow = (id) => client.delete(`/flows/${id}`)\n\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\n\nexport default {\n    getAllChatflows,\n    createNewChatflowVersion,\n    getSpecificChatflow,\n    getSpecificChatflowFromPublicEndpoint,\n    createNewChatflow,\n    updateChatflow,\n    deleteChatflow,\n    getIsChatflowStreaming\n}\n","import { createPortal } from 'react-dom'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Dialog, DialogActions, DialogContent, Typography, DialogTitle } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { Input } from 'ui-component/input/Input'\n\nconst LoginDialog = ({ show, dialogProps, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n    const usernameInput = {\n        label: 'Username',\n        name: 'username',\n        type: 'string',\n        placeholder: 'john doe'\n    }\n    const passwordInput = {\n        label: 'Password',\n        name: 'password',\n        type: 'password'\n    }\n    const [usernameVal, setUsernameVal] = useState('')\n    const [passwordVal, setPasswordVal] = useState('')\n\n    const component = show ? (\n        <Dialog\n            onKeyUp={(e) => {\n                if (e.key === 'Enter') {\n                    onConfirm(usernameVal, passwordVal)\n                }\n            }}\n            open={show}\n            fullWidth\n            maxWidth='xs'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <Typography>Username</Typography>\n                <Input\n                    inputParam={usernameInput}\n                    onChange={(newValue) => setUsernameVal(newValue)}\n                    value={usernameVal}\n                    showDialog={false}\n                />\n                <div style={{ marginTop: 20 }}></div>\n                <Typography>Password</Typography>\n                <Input inputParam={passwordInput} onChange={(newValue) => setPasswordVal(newValue)} value={passwordVal} />\n            </DialogContent>\n            <DialogActions>\n                <StyledButton variant='contained' onClick={() => onConfirm(usernameVal, passwordVal)}>\n                    {dialogProps.confirmButtonName}\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nLoginDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onConfirm: PropTypes.func\n}\n\nexport default LoginDialog\n","import { useEffect, useState } from 'react'\n// import { FullPageChat } from 'flowise-embed-react'\nimport { useNavigate } from 'react-router-dom'\n\n// Project import\nimport LoginDialog from 'ui-component/dialog/LoginDialog'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n//Const\nimport { baseURL } from 'store/constant'\n\n// ==============================|| Chatbot ||============================== //\n\nconst ChatbotFull = () => {\n    const URLpath = document.location.pathname.toString().split('/')\n    const chatflowId = URLpath[URLpath.length - 1] === 'chatbot' ? '' : URLpath[URLpath.length - 1]\n    const navigate = useNavigate()\n\n    const [chatflow, setChatflow] = useState(null)\n    const [chatbotTheme, setChatbotTheme] = useState({})\n    const [loginDialogOpen, setLoginDialogOpen] = useState(false)\n    const [loginDialogProps, setLoginDialogProps] = useState({})\n    const [isLoading, setLoading] = useState(true)\n    const [chatbotOverrideConfig, setChatbotOverrideConfig] = useState({})\n\n    const getSpecificChatflowFromPublicApi = useApi(chatflowsApi.getSpecificChatflowFromPublicEndpoint)\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\n\n    const onLoginClick = (username, password) => {\n        localStorage.setItem('username', username)\n        localStorage.setItem('password', password)\n        navigate(0)\n    }\n\n    useEffect(() => {\n        getSpecificChatflowFromPublicApi.request(chatflowId)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (getSpecificChatflowFromPublicApi.error) {\n            if (getSpecificChatflowFromPublicApi.error?.response?.status === 401) {\n                if (localStorage.getItem('username') && localStorage.getItem('password')) {\n                    getSpecificChatflowApi.request(chatflowId)\n                } else {\n                    setLoginDialogProps({\n                        title: 'Login',\n                        confirmButtonName: 'Login'\n                    })\n                    setLoginDialogOpen(true)\n                }\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getSpecificChatflowFromPublicApi.error])\n\n    useEffect(() => {\n        if (getSpecificChatflowApi.error) {\n            if (getSpecificChatflowApi.error?.response?.status === 401) {\n                setLoginDialogProps({\n                    title: 'Login',\n                    confirmButtonName: 'Login'\n                })\n                setLoginDialogOpen(true)\n            }\n        }\n    }, [getSpecificChatflowApi.error])\n\n    useEffect(() => {\n        if (getSpecificChatflowFromPublicApi.data || getSpecificChatflowApi.data) {\n            const chatflowData = getSpecificChatflowFromPublicApi.data || getSpecificChatflowApi.data\n            setChatflow(chatflowData)\n            if (chatflowData.chatbotConfig) {\n                try {\n                    const parsedConfig = JSON.parse(chatflowData.chatbotConfig)\n                    setChatbotTheme(parsedConfig)\n                    if (parsedConfig.overrideConfig) {\n                        // Generate new sessionId\n                        if (parsedConfig.overrideConfig.generateNewSession) {\n                            parsedConfig.overrideConfig.sessionId = Date.now().toString()\n                        }\n                        setChatbotOverrideConfig(parsedConfig.overrideConfig)\n                    }\n                } catch (e) {\n                    console.error(e)\n                    setChatbotTheme({})\n                    setChatbotOverrideConfig({})\n                }\n            }\n        }\n    }, [getSpecificChatflowFromPublicApi.data, getSpecificChatflowApi.data])\n\n    useEffect(() => {\n        setLoading(getSpecificChatflowFromPublicApi.loading || getSpecificChatflowApi.loading)\n    }, [getSpecificChatflowFromPublicApi.loading, getSpecificChatflowApi.loading])\n\n    return (\n        <>\n            {!isLoading ? (\n                <>\n                    {/* {!chatflow || chatflow.apikeyid ? (\n                        <p>Invalid Chatbot</p>\n                    ) : (\n                        <FullPageChat\n                            chatflowid={chatflow.id}\n                            apiHost={baseURL}\n                            chatflowConfig={chatbotOverrideConfig}\n                            theme={{ chatWindow: chatbotTheme }}\n                        />\n                    )} */}\n                    <LoginDialog show={loginDialogOpen} dialogProps={loginDialogProps} onConfirm={onLoginClick} />\n                </>\n            ) : null}\n        </>\n    )\n}\n\nexport default ChatbotFull\n"],"names":["getAllChatflows","client","get","createNewChatflowVersion","id","body","post","concat","getSpecificChatflow","getSpecificChatflowFromPublicEndpoint","createNewChatflow","updateChatflow","put","deleteChatflow","delete","getIsChatflowStreaming","_ref","show","dialogProps","onConfirm","portalElement","document","getElementById","usernameVal","setUsernameVal","useState","passwordVal","setPasswordVal","component","_jsxs","Dialog","onKeyUp","e","key","open","fullWidth","maxWidth","children","_jsx","DialogTitle","sx","fontSize","title","DialogContent","Typography","Input","inputParam","label","name","type","placeholder","onChange","newValue","value","showDialog","style","marginTop","DialogActions","StyledButton","variant","onClick","confirmButtonName","createPortal","ChatbotFull","URLpath","location","pathname","toString","split","chatflowId","length","navigate","useNavigate","chatflow","setChatflow","chatbotTheme","setChatbotTheme","loginDialogOpen","setLoginDialogOpen","loginDialogProps","setLoginDialogProps","isLoading","setLoading","chatbotOverrideConfig","setChatbotOverrideConfig","getSpecificChatflowFromPublicApi","useApi","chatflowsApi","getSpecificChatflowApi","useEffect","request","_getSpecificChatflowF","_getSpecificChatflowF2","error","response","status","localStorage","getItem","_getSpecificChatflowA","_getSpecificChatflowA2","data","chatflowData","chatbotConfig","parsedConfig","JSON","parse","overrideConfig","generateNewSession","sessionId","Date","now","console","loading","_Fragment","LoginDialog","onLoginClick","username","password","setItem"],"sourceRoot":""}