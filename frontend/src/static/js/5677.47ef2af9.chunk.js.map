{"version":3,"file":"static/js/5677.47ef2af9.chunk.js","mappings":"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","sources":["api/chatflows.js","utils/usePrompt.js","views/canvas/ButtonEdge.js","ui-component/dialog/SaveChatflowDialog.js","views/chatflows/ShareChatbot.js","ui-component/checkbox/Checkbox.js","views/chatflows/EmbedChat.js","assets/images/python.svg","assets/images/javascript.svg","assets/images/cURL.svg","assets/images/embed.svg","api/apikey.js","views/chatflows/APICodeDialog.js","ui-component/button/StyledFab.js","views/canvas/CanvasHeader.js","ui-component/extended/Transitions.js","views/canvas/AddNodes.js","ui-component/markdown/CodeBlock.js","ui-component/markdown/MemoizedReactMarkdown.js","ui-component/dialog/SourceDocDialog.js","api/chatmessage.js","api/prediction.js","views/chatmessage/ChatMessage.js","views/canvas/index.js"],"sourcesContent":["import client from './client'\n\nconst getAllChatflows = () => client.get('/flows')\n\nconst getSpecificChatflow = (id) => client.get(`/flows/${id}`)\n\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\n\nconst createNewChatflow = (body) => client.post(`/flows`, body)\nconst createNewChatflowVersion = (id,body) => client.post(`/flows/${id}`, body)\n\nconst updateChatflow = (id, body) => client.put(`/flows/${id}`, body)\n\nconst deleteChatflow = (id) => client.delete(`/flows/${id}`)\n\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\n\nexport default {\n    getAllChatflows,\n    createNewChatflowVersion,\n    getSpecificChatflow,\n    getSpecificChatflowFromPublicEndpoint,\n    createNewChatflow,\n    updateChatflow,\n    deleteChatflow,\n    getIsChatflowStreaming\n}\n","import { useCallback, useContext, useEffect } from 'react'\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom'\n\n// https://stackoverflow.com/questions/71572678/react-router-v-6-useprompt-typescript\n\nexport function useBlocker(blocker, when = true) {\n    const { navigator } = useContext(NavigationContext)\n\n    useEffect(() => {\n        if (!when) return\n\n        const unblock = navigator.block((tx) => {\n            const autoUnblockingTx = {\n                ...tx,\n                retry() {\n                    unblock()\n                    tx.retry()\n                }\n            }\n\n            blocker(autoUnblockingTx)\n        })\n\n        return unblock\n    }, [navigator, blocker, when])\n}\n\nexport function usePrompt(message, when = true) {\n    const blocker = useCallback(\n        (tx) => {\n            if (window.confirm(message)) tx.retry()\n        },\n        [message]\n    )\n\n    useBlocker(blocker, when)\n}\n","import { getBezierPath, EdgeText } from 'reactflow'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { useContext } from 'react'\nimport { SET_DIRTY } from 'store/actions'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\nimport './index.css'\n\nconst foreignObjectSize = 40\n\nconst ButtonEdge = ({ id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style = {}, data, markerEnd }) => {\n    const [edgePath, edgeCenterX, edgeCenterY] = getBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition\n    })\n\n    const { deleteEdge } = useContext(flowContext)\n\n    const dispatch = useDispatch()\n\n    const onEdgeClick = (evt, id) => {\n        evt.stopPropagation()\n        deleteEdge(id)\n        dispatch({ type: SET_DIRTY })\n    }\n\n    return (\n        <>\n            <path id={id} style={style} className='react-flow__edge-path' d={edgePath} markerEnd={markerEnd} />\n            {data && data.label && (\n                <EdgeText\n                    x={sourceX + 10}\n                    y={sourceY + 10}\n                    label={data.label}\n                    labelStyle={{ fill: 'black' }}\n                    labelBgStyle={{ fill: 'transparent' }}\n                    labelBgPadding={[2, 4]}\n                    labelBgBorderRadius={2}\n                />\n            )}\n            <foreignObject\n                width={foreignObjectSize}\n                height={foreignObjectSize}\n                x={edgeCenterX - foreignObjectSize / 2}\n                y={edgeCenterY - foreignObjectSize / 2}\n                className='edgebutton-foreignobject'\n                requiredExtensions='http://www.w3.org/1999/xhtml'\n            >\n                <div>\n                    <button className='edgebutton' onClick={(event) => onEdgeClick(event, id)}>\n                        ×\n                    </button>\n                </div>\n            </foreignObject>\n        </>\n    )\n}\n\nButtonEdge.propTypes = {\n    id: PropTypes.string,\n    sourceX: PropTypes.number,\n    sourceY: PropTypes.number,\n    targetX: PropTypes.number,\n    targetY: PropTypes.number,\n    sourcePosition: PropTypes.any,\n    targetPosition: PropTypes.any,\n    style: PropTypes.object,\n    data: PropTypes.object,\n    markerEnd: PropTypes.any\n}\n\nexport default ButtonEdge\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\nconst SaveChatflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\n    const [portalElement, setPortalElement] = useState(null);\n    const [chatflowName, setChatflowName] = useState('')\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\n\n    useEffect(() => {\n        setPortalElement(document.getElementById('portal'));\n    }, [show]);\n\n    useEffect(() => {\n        if (chatflowName) setIsReadyToSave(true)\n        else setIsReadyToSave(false)\n    }, [chatflowName])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='xs'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <OutlinedInput\n                    sx={{ mt: 1 }}\n                    id='chatflow-name'\n                    type='text'\n                    fullWidth\n                    placeholder='My New Chatflow'\n                    value={chatflowName}\n                    onChange={(e) => setChatflowName(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\n                <StyledButton disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(chatflowName)}>\n                    {dialogProps.confirmButtonName}\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return portalElement ? createPortal(component, portalElement) : null;\n}\n\nSaveChatflowDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default SaveChatflowDialog","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\nimport { SketchPicker } from 'react-color'\nimport PropTypes from 'prop-types'\n\nimport { Box, Typography, Button, Switch, OutlinedInput, Popover, Stack, IconButton } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\n\n// Icons\nimport { IconX, IconCopy, IconArrowUpRightCircle } from '@tabler/icons'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nconst defaultConfig = {\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n    poweredByTextColor: '#303235',\n    botMessage: {\n        backgroundColor: '#f7f8ff',\n        textColor: '#303235'\n    },\n    userMessage: {\n        backgroundColor: '#3B81F6',\n        textColor: '#ffffff'\n    },\n    textInput: {\n        backgroundColor: '#ffffff',\n        textColor: '#303235',\n        sendButtonColor: '#3B81F6'\n    }\n}\n\nconst ShareChatbot = ({ isSessionMemory }) => {\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const chatflow = useSelector((state) => state.canvas.chatflow)\n    const chatflowid = chatflow.id\n    const chatbotConfig = chatflow.chatbotConfig ? JSON.parse(chatflow.chatbotConfig) : {}\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [isPublicChatflow, setChatflowIsPublic] = useState(chatflow.isPublic ?? false)\n    const [generateNewSession, setGenerateNewSession] = useState(chatbotConfig?.generateNewSession ?? false)\n\n    const [welcomeMessage, setWelcomeMessage] = useState(chatbotConfig?.welcomeMessage ?? '')\n    const [backgroundColor, setBackgroundColor] = useState(chatbotConfig?.backgroundColor ?? defaultConfig.backgroundColor)\n    const [fontSize, setFontSize] = useState(chatbotConfig?.fontSize ?? defaultConfig.fontSize)\n    const [poweredByTextColor, setPoweredByTextColor] = useState(chatbotConfig?.poweredByTextColor ?? defaultConfig.poweredByTextColor)\n\n    const [botMessageBackgroundColor, setBotMessageBackgroundColor] = useState(\n        chatbotConfig?.botMessage?.backgroundColor ?? defaultConfig.botMessage.backgroundColor\n    )\n    const [botMessageTextColor, setBotMessageTextColor] = useState(\n        chatbotConfig?.botMessage?.textColor ?? defaultConfig.botMessage.textColor\n    )\n    const [botMessageAvatarSrc, setBotMessageAvatarSrc] = useState(chatbotConfig?.botMessage?.avatarSrc ?? '')\n    const [botMessageShowAvatar, setBotMessageShowAvatar] = useState(chatbotConfig?.botMessage?.showAvatar ?? false)\n\n    const [userMessageBackgroundColor, setUserMessageBackgroundColor] = useState(\n        chatbotConfig?.userMessage?.backgroundColor ?? defaultConfig.userMessage.backgroundColor\n    )\n    const [userMessageTextColor, setUserMessageTextColor] = useState(\n        chatbotConfig?.userMessage?.textColor ?? defaultConfig.userMessage.textColor\n    )\n    const [userMessageAvatarSrc, setUserMessageAvatarSrc] = useState(chatbotConfig?.userMessage?.avatarSrc ?? '')\n    const [userMessageShowAvatar, setUserMessageShowAvatar] = useState(chatbotConfig?.userMessage?.showAvatar ?? false)\n\n    const [textInputBackgroundColor, setTextInputBackgroundColor] = useState(\n        chatbotConfig?.textInput?.backgroundColor ?? defaultConfig.textInput.backgroundColor\n    )\n    const [textInputTextColor, setTextInputTextColor] = useState(chatbotConfig?.textInput?.textColor ?? defaultConfig.textInput.textColor)\n    const [textInputPlaceholder, setTextInputPlaceholder] = useState(chatbotConfig?.textInput?.placeholder ?? '')\n    const [textInputSendButtonColor, setTextInputSendButtonColor] = useState(\n        chatbotConfig?.textInput?.sendButtonColor ?? defaultConfig.textInput.sendButtonColor\n    )\n\n    const [colorAnchorEl, setColorAnchorEl] = useState(null)\n    const [selectedColorConfig, setSelectedColorConfig] = useState('')\n    const [sketchPickerColor, setSketchPickerColor] = useState('')\n    const openColorPopOver = Boolean(colorAnchorEl)\n\n    const [copyAnchorEl, setCopyAnchorEl] = useState(null)\n    const openCopyPopOver = Boolean(copyAnchorEl)\n\n    const formatObj = () => {\n        const obj = {\n            botMessage: {\n                showAvatar: false\n            },\n            userMessage: {\n                showAvatar: false\n            },\n            textInput: {},\n            overrideConfig: {}\n        }\n        if (welcomeMessage) obj.welcomeMessage = welcomeMessage\n        if (backgroundColor) obj.backgroundColor = backgroundColor\n        if (fontSize) obj.fontSize = fontSize\n        if (poweredByTextColor) obj.poweredByTextColor = poweredByTextColor\n\n        if (botMessageBackgroundColor) obj.botMessage.backgroundColor = botMessageBackgroundColor\n        if (botMessageTextColor) obj.botMessage.textColor = botMessageTextColor\n        if (botMessageAvatarSrc) obj.botMessage.avatarSrc = botMessageAvatarSrc\n        if (botMessageShowAvatar) obj.botMessage.showAvatar = botMessageShowAvatar\n\n        if (userMessageBackgroundColor) obj.userMessage.backgroundColor = userMessageBackgroundColor\n        if (userMessageTextColor) obj.userMessage.textColor = userMessageTextColor\n        if (userMessageAvatarSrc) obj.userMessage.avatarSrc = userMessageAvatarSrc\n        if (userMessageShowAvatar) obj.userMessage.showAvatar = userMessageShowAvatar\n\n        if (textInputBackgroundColor) obj.textInput.backgroundColor = textInputBackgroundColor\n        if (textInputTextColor) obj.textInput.textColor = textInputTextColor\n        if (textInputPlaceholder) obj.textInput.placeholder = textInputPlaceholder\n        if (textInputSendButtonColor) obj.textInput.sendButtonColor = textInputSendButtonColor\n\n        if (isSessionMemory) obj.overrideConfig.generateNewSession = generateNewSession\n\n        return obj\n    }\n\n    const onSave = async () => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\n                chatbotConfig: JSON.stringify(formatObj())\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const onSwitchChange = async (checked) => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, { isPublic: checked })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const handleClosePopOver = () => {\n        setColorAnchorEl(null)\n    }\n\n    const handleCloseCopyPopOver = () => {\n        setCopyAnchorEl(null)\n    }\n\n    const onColorSelected = (hexColor) => {\n        switch (selectedColorConfig) {\n            case 'backgroundColor':\n                setBackgroundColor(hexColor)\n                break\n            case 'poweredByTextColor':\n                setPoweredByTextColor(hexColor)\n                break\n            case 'botMessageBackgroundColor':\n                setBotMessageBackgroundColor(hexColor)\n                break\n            case 'botMessageTextColor':\n                setBotMessageTextColor(hexColor)\n                break\n            case 'userMessageBackgroundColor':\n                setUserMessageBackgroundColor(hexColor)\n                break\n            case 'userMessageTextColor':\n                setUserMessageTextColor(hexColor)\n                break\n            case 'textInputBackgroundColor':\n                setTextInputBackgroundColor(hexColor)\n                break\n            case 'textInputTextColor':\n                setTextInputTextColor(hexColor)\n                break\n            case 'textInputSendButtonColor':\n                setTextInputSendButtonColor(hexColor)\n                break\n        }\n        setSketchPickerColor(hexColor)\n    }\n\n    const onTextChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'welcomeMessage':\n                setWelcomeMessage(value)\n                break\n            case 'fontSize':\n                setFontSize(value)\n                break\n            case 'botMessageAvatarSrc':\n                setBotMessageAvatarSrc(value)\n                break\n            case 'userMessageAvatarSrc':\n                setUserMessageAvatarSrc(value)\n                break\n            case 'textInputPlaceholder':\n                setTextInputPlaceholder(value)\n                break\n        }\n    }\n\n    const onBooleanChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'botMessageShowAvatar':\n                setBotMessageShowAvatar(value)\n                break\n            case 'userMessageShowAvatar':\n                setUserMessageShowAvatar(value)\n                break\n            case 'generateNewSession':\n                setGenerateNewSession(value)\n                break\n        }\n    }\n\n    const colorField = (color, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Box\n                        sx={{\n                            cursor: 'pointer',\n                            width: '30px',\n                            height: '30px',\n                            border: '1px solid #616161',\n                            marginRight: '10px',\n                            backgroundColor: color ?? '#ffffff',\n                            borderRadius: '5px'\n                        }}\n                        onClick={(event) => {\n                            setSelectedColorConfig(fieldName)\n                            setSketchPickerColor(color ?? '#ffffff')\n                            setColorAnchorEl(event.currentTarget)\n                        }}\n                    ></Box>\n                </div>\n            </Box>\n        )\n    }\n\n    const booleanField = (value, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Switch\n                        id={fieldName}\n                        checked={value}\n                        onChange={(event) => {\n                            onBooleanChanged(event.target.checked, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <OutlinedInput\n                        id={fieldName}\n                        type={fieldType}\n                        fullWidth\n                        value={message}\n                        placeholder={placeholder}\n                        name={fieldName}\n                        onChange={(e) => {\n                            onTextChanged(e.target.value, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    return (\n        <>\n            <Stack direction='row'>\n                <Typography\n                    sx={{\n                        p: 1,\n                        borderRadius: 10,\n                        backgroundColor: theme.palette.primary.light,\n                        width: 'max-content',\n                        height: 'max-content'\n                    }}\n                    variant='h5'\n                >\n                    {`${baseURL}/chatbot/${chatflowid}`}\n                </Typography>\n                <IconButton\n                    title='Copy Link'\n                    color='success'\n                    onClick={(event) => {\n                        navigator.clipboard.writeText(`${baseURL}/chatbot/${chatflowid}`)\n                        setCopyAnchorEl(event.currentTarget)\n                        setTimeout(() => {\n                            handleCloseCopyPopOver()\n                        }, 1500)\n                    }}\n                >\n                    <IconCopy />\n                </IconButton>\n                <IconButton title='Open New Tab' color='primary' onClick={() => window.open(`${baseURL}/chatbot/${chatflowid}`, '_blank')}>\n                    <IconArrowUpRightCircle />\n                </IconButton>\n                <div style={{ flex: 1 }} />\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <Switch\n                        checked={isPublicChatflow}\n                        onChange={(event) => {\n                            setChatflowIsPublic(event.target.checked)\n                            onSwitchChange(event.target.checked)\n                        }}\n                    />\n                    <Typography>Make Public</Typography>\n                    <TooltipWithParser\n                        style={{ marginLeft: 10 }}\n                        title={'Making public will allow anyone to access the chatbot without username & password'}\n                    />\n                </div>\n            </Stack>\n            {textField(welcomeMessage, 'welcomeMessage', 'Welcome Message', 'string', 'Hello! This is custom welcome message')}\n            {colorField(backgroundColor, 'backgroundColor', 'Background Color')}\n            {textField(fontSize, 'fontSize', 'Font Size', 'number')}\n            {colorField(poweredByTextColor, 'poweredByTextColor', 'PoweredBy TextColor')}\n\n            {/*BOT Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Bot Message\n            </Typography>\n            {colorField(botMessageBackgroundColor, 'botMessageBackgroundColor', 'Background Color')}\n            {colorField(botMessageTextColor, 'botMessageTextColor', 'Text Color')}\n            {textField(\n                botMessageAvatarSrc,\n                'botMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png`\n            )}\n            {booleanField(botMessageShowAvatar, 'botMessageShowAvatar', 'Show Avatar')}\n\n            {/*USER Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                User Message\n            </Typography>\n            {colorField(userMessageBackgroundColor, 'userMessageBackgroundColor', 'Background Color')}\n            {colorField(userMessageTextColor, 'userMessageTextColor', 'Text Color')}\n            {textField(\n                userMessageAvatarSrc,\n                'userMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png`\n            )}\n            {booleanField(userMessageShowAvatar, 'userMessageShowAvatar', 'Show Avatar')}\n\n            {/*TEXT Input*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Text Input\n            </Typography>\n            {colorField(textInputBackgroundColor, 'textInputBackgroundColor', 'Background Color')}\n            {colorField(textInputTextColor, 'textInputTextColor', 'Text Color')}\n            {textField(textInputPlaceholder, 'textInputPlaceholder', 'TextInput Placeholder', 'string', `Type question..`)}\n            {colorField(textInputSendButtonColor, 'textInputSendButtonColor', 'TextIntput Send Button Color')}\n\n            {/*Session Memory Input*/}\n            {isSessionMemory && (\n                <>\n                    <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                        Session Memory\n                    </Typography>\n                    {booleanField(generateNewSession, 'generateNewSession', 'Start new session when chatbot link is opened or refreshed')}\n                </>\n            )}\n\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\n                Save Changes\n            </StyledButton>\n            <Popover\n                open={openColorPopOver}\n                anchorEl={colorAnchorEl}\n                onClose={handleClosePopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <SketchPicker color={sketchPickerColor} onChange={(color) => onColorSelected(color.hex)} />\n            </Popover>\n            <Popover\n                open={openCopyPopOver}\n                anchorEl={copyAnchorEl}\n                onClose={handleCloseCopyPopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                    Copied!\n                </Typography>\n            </Popover>\n        </>\n    )\n}\n\nShareChatbot.propTypes = {\n    isSessionMemory: PropTypes.bool\n}\n\nexport default ShareChatbot\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormControlLabel, Checkbox } from '@mui/material'\n\nexport const CheckboxInput = ({ value, label, onChange, disabled = false }) => {\n    const [myValue, setMyValue] = useState(value)\n\n    return (\n        <>\n            <FormControlLabel\n                sx={{ mt: 1, width: '100%' }}\n                size='small'\n                control={\n                    <Checkbox\n                        disabled={disabled}\n                        checked={myValue}\n                        onChange={(event) => {\n                            setMyValue(event.target.checked)\n                            onChange(event.target.checked)\n                        }}\n                    />\n                }\n                label={label}\n            />\n        </>\n    )\n}\n\nCheckboxInput.propTypes = {\n    value: PropTypes.bool,\n    label: PropTypes.string,\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool\n}\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Tabs, Tab, Box } from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\n\n// Project import\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst embedPopupHtmlCode = (chatflowid) => {\n    return `<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.init({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n    })\n</script>`\n}\n\nconst embedPopupReactCode = (chatflowid) => {\n    return `import { BubbleChat } from 'flowise-embed-react'\n\nconst App = () => {\n    return (\n        <BubbleChat chatflowid=\"${chatflowid}\" apiHost=\"${baseURL}\" />\n    );\n};`\n}\n\nconst embedFullpageHtmlCode = (chatflowid) => {\n    return `<flowise-fullchatbot></flowise-fullchatbot>\n<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.initFull({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n    })\n</script>`\n}\n\nconst embedFullpageReactCode = (chatflowid) => {\n    return `import { FullPageChat } from \"flowise-embed-react\"\n\nconst App = () => {\n    return (\n        <FullPageChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n        />\n    );\n};`\n}\n\nconst buttonConfig = (isReact = false) => {\n    return isReact\n        ? `button: {\n                    backgroundColor: \"#3B81F6\",\n                    right: 20,\n                    bottom: 20,\n                    size: \"medium\",\n                    iconColor: \"white\",\n                    customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\n                }`\n        : `button: {\n                backgroundColor: \"#3B81F6\",\n                right: 20,\n                bottom: 20,\n                size: \"medium\",\n                iconColor: \"white\",\n                customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\n            }`\n}\n\nconst chatwindowConfig = (isReact = false) => {\n    return isReact\n        ? `chatWindow: {\n                    welcomeMessage: \"Hello! This is custom welcome message\",\n                    backgroundColor: \"#ffffff\",\n                    height: 700,\n                    width: 400,\n                    fontSize: 16,\n                    poweredByTextColor: \"#303235\",\n                    botMessage: {\n                        backgroundColor: \"#f7f8ff\",\n                        textColor: \"#303235\",\n                        showAvatar: true,\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\n                    },\n                    userMessage: {\n                        backgroundColor: \"#3B81F6\",\n                        textColor: \"#ffffff\",\n                        showAvatar: true,\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\n                    },\n                    textInput: {\n                        placeholder: \"Type your question\",\n                        backgroundColor: \"#ffffff\",\n                        textColor: \"#303235\",\n                        sendButtonColor: \"#3B81F6\",\n                    }\n                }`\n        : `chatWindow: {\n                welcomeMessage: \"Hello! This is custom welcome message\",\n                backgroundColor: \"#ffffff\",\n                height: 700,\n                width: 400,\n                fontSize: 16,\n                poweredByTextColor: \"#303235\",\n                botMessage: {\n                    backgroundColor: \"#f7f8ff\",\n                    textColor: \"#303235\",\n                    showAvatar: true,\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\n                },\n                userMessage: {\n                    backgroundColor: \"#3B81F6\",\n                    textColor: \"#ffffff\",\n                    showAvatar: true,\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\n                },\n                textInput: {\n                    placeholder: \"Type your question\",\n                    backgroundColor: \"#ffffff\",\n                    textColor: \"#303235\",\n                    sendButtonColor: \"#3B81F6\",\n                }\n            }`\n}\n\nconst embedPopupHtmlCodeCustomization = (chatflowid) => {\n    return `<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.init({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n        chatflowConfig: {\n            // topK: 2\n        },\n        theme: {\n            ${buttonConfig()},\n            ${chatwindowConfig()}\n        }\n    })\n</script>`\n}\n\nconst embedPopupReactCodeCustomization = (chatflowid) => {\n    return `import { BubbleChat } from 'flowise-embed-react'\n\nconst App = () => {\n    return (\n        <BubbleChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n            theme={{\n                ${buttonConfig(true)},\n                ${chatwindowConfig(true)}\n            }}\n        />\n    );\n};`\n}\n\nconst embedFullpageHtmlCodeCustomization = (chatflowid) => {\n    return `<flowise-fullchatbot></flowise-fullchatbot>\n<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\n    Chatbot.initFull({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n        theme: {\n            ${chatwindowConfig()}\n        }\n    })\n</script>`\n}\n\nconst embedFullpageReactCodeCustomization = (chatflowid) => {\n    return `import { FullPageChat } from \"flowise-embed-react\"\n\nconst App = () => {\n    return (\n        <FullPageChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n            theme={{\n                ${chatwindowConfig(true)}\n            }}\n        />\n    );\n};`\n}\n\nconst EmbedChat = ({ chatflowid }) => {\n    const codes = ['Popup Html', 'Fullpage Html', 'Popup React', 'Fullpage React']\n    const [value, setValue] = useState(0)\n    const [embedChatCheckboxVal, setEmbedChatCheckbox] = useState(false)\n\n    const onCheckBoxEmbedChatChanged = (newVal) => {\n        setEmbedChatCheckbox(newVal)\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        switch (codeLang) {\n            case 'Popup Html':\n                return embedPopupHtmlCode(chatflowid)\n            case 'Fullpage Html':\n                return embedFullpageHtmlCode(chatflowid)\n            case 'Popup React':\n                return embedPopupReactCode(chatflowid)\n            case 'Fullpage React':\n                return embedFullpageReactCode(chatflowid)\n            default:\n                return ''\n        }\n    }\n\n    const getCodeCustomization = (codeLang) => {\n        switch (codeLang) {\n            case 'Popup Html':\n                return embedPopupHtmlCodeCustomization(chatflowid)\n            case 'Fullpage Html':\n                return embedFullpageHtmlCodeCustomization(chatflowid)\n            case 'Popup React':\n                return embedPopupReactCodeCustomization(chatflowid)\n            case 'Fullpage React':\n                return embedFullpageReactCodeCustomization(chatflowid)\n            default:\n                return ''\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                <div style={{ flex: 80 }}>\n                    <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                        {codes.map((codeLang, index) => (\n                            <Tab key={index} label={codeLang} {...a11yProps(index)}></Tab>\n                        ))}\n                    </Tabs>\n                </div>\n            </div>\n            <div style={{ marginTop: 10 }}></div>\n            {codes.map((codeLang, index) => (\n                <TabPanel key={index} value={value} index={index}>\n                    {(value === 0 || value === 1) && (\n                        <>\n                            <span>\n                                Paste this anywhere in the <code>{`<body>`}</code> tag of your html file.\n                                <p>\n                                    You can also specify a&nbsp;\n                                    <a\n                                        rel='noreferrer'\n                                        target='_blank'\n                                        href='https://www.npmjs.com/package/flowise-embed?activeTab=versions'\n                                    >\n                                        version\n                                    </a>\n                                    :&nbsp;<code>{`https://cdn.jsdelivr.net/npm/flowise-embed@<version>/dist/web.js`}</code>\n                                </p>\n                            </span>\n                            <div style={{ height: 10 }}></div>\n                        </>\n                    )}\n                    <CopyBlock theme={atomOneDark} text={getCode(codeLang)} language='javascript' showLineNumbers={false} wrapLines />\n\n                    <CheckboxInput label='Show Embed Chat Config' value={embedChatCheckboxVal} onChange={onCheckBoxEmbedChatChanged} />\n\n                    {embedChatCheckboxVal && (\n                        <CopyBlock\n                            theme={atomOneDark}\n                            text={getCodeCustomization(codeLang)}\n                            language='javascript'\n                            showLineNumbers={false}\n                            wrapLines\n                        />\n                    )}\n                </TabPanel>\n            ))}\n        </>\n    )\n}\n\nEmbedChat.propTypes = {\n    chatflowid: PropTypes.string\n}\n\nexport default EmbedChat\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPython(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.84.5a16.4,16.4,0,0,0-3.57.32C9.1,1.39,8.53,2.53,8.53,4.64V7.48H16v1H5.77a4.73,4.73,0,0,0-4.7,3.74,14.82,14.82,0,0,0,0,7.54c.57,2.28,1.86,3.82,4,3.82h2.6V20.14a4.73,4.73,0,0,1,4.63-4.63h7.38a3.72,3.72,0,0,0,3.73-3.73V4.64A4.16,4.16,0,0,0,19.65.82,20.49,20.49,0,0,0,15.84.5ZM11.78,2.77a1.39,1.39,0,0,1,1.38,1.46,1.37,1.37,0,0,1-1.38,1.38A1.42,1.42,0,0,1,10.4,4.23,1.44,1.44,0,0,1,11.78,2.77Z\",\n    fill: \"#5a9fd4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.16,31.5a16.4,16.4,0,0,0,3.57-.32c3.17-.57,3.74-1.71,3.74-3.82V24.52H16v-1H26.23a4.73,4.73,0,0,0,4.7-3.74,14.82,14.82,0,0,0,0-7.54c-.57-2.28-1.86-3.82-4-3.82h-2.6v3.41a4.73,4.73,0,0,1-4.63,4.63H12.35a3.72,3.72,0,0,0-3.73,3.73v7.14a4.16,4.16,0,0,0,3.73,3.82A20.49,20.49,0,0,0,16.16,31.5Zm4.06-2.27a1.39,1.39,0,0,1-1.38-1.46,1.37,1.37,0,0,1,1.38-1.38,1.42,1.42,0,0,1,1.38,1.38A1.44,1.44,0,0,1,20.22,29.23Z\",\n    fill: \"#ffd43b\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPython);\nexport default __webpack_public_path__ + \"static/media/python.b0fd2326ee21d9c5524d0d243379c879.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgJavascript(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    fill: \"#f7df1e\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.5,25a3.27,3.27,0,0,0,3,1.83c1.25,0,2-.63,2-1.49,0-1-.81-1.39-2.19-2L23.56,23C21.39,22.1,20,20.94,20,18.49c0-2.25,1.72-4,4.41-4a4.44,4.44,0,0,1,4.27,2.41l-2.34,1.5a2,2,0,0,0-1.93-1.29,1.31,1.31,0,0,0-1.44,1.29c0,.9.56,1.27,1.85,1.83l.75.32c2.55,1.1,4,2.21,4,4.72,0,2.71-2.12,4.19-5,4.19a5.78,5.78,0,0,1-5.48-3.07Zm-10.63.26c.48.84.91,1.55,1.94,1.55s1.61-.39,1.61-1.89V14.69h3V25c0,3.11-1.83,4.53-4.49,4.53a4.66,4.66,0,0,1-4.51-2.75Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgJavascript);\nexport default __webpack_public_path__ + \"static/media/javascript.0baf38b3d3f5b2d24e87fb5cc2fcfea0.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCUrl(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    rx: 4,\n    fill: \"#1683a5\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.71,14A5,5,0,0,1,8.82,9.29l2.64-2.2c1.67-1.37,2.52-1.41,4.6-1.41H21.7c1.19,0,2.45.27,2.45,1.79s-1.4,1.78-2.45,1.78H15.44a3.31,3.31,0,0,0-2,.89L11.24,12c-.55.44-1,.81-1,1.52v4.41c0,.7.41,1.07,1,1.52l2.16,1.82a3.34,3.34,0,0,0,2,.89H21.7c1.05,0,2.45.23,2.45,1.78s-1.26,1.78-2.45,1.78H16.06c-2.08,0-2.94,0-4.6-1.4L8.82,22.09A5.05,5.05,0,0,1,6.71,17.4Z\",\n    fill: \"#fff\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCUrl);\nexport default __webpack_public_path__ + \"static/media/cURL.37eb8ccceafb9e8630a53aa0eb756128.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEmbed(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\",\n    focusable: \"false\",\n    className: \"chakra-icon css-lbf1w4\",\n    id: \"Capa_1\",\n    enableBackground: \"new 0 0 512 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-367.08c-39.95 0-72.46-32.51-72.46-72.47v-229.66c0-39.96 32.51-72.47 72.46-72.47h367.08c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#6aa9ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-183.54v-374.6h183.54c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#4987ea\"\n  }), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m146.16 349.223-78.4-78.4c-5.858-5.858-5.858-15.355 0-21.213l86.833-86.833c5.857-5.858 15.355-5.858 21.213 0s5.858 15.355 0 21.213l-76.226 76.226 67.793 67.794c5.858 5.858 5.858 15.355 0 21.213-5.857 5.858-15.355 5.859-21.213 0z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m336.194 349.223c-5.858-5.858-5.858-15.355 0-21.213l76.226-76.227-67.793-67.794c-5.858-5.858-5.858-15.355 0-21.213 5.857-5.858 15.355-5.858 21.213 0l78.4 78.4c5.858 5.858 5.858 15.355 0 21.213l-86.833 86.833c-5.856 5.859-15.355 5.86-21.213.001z\",\n    fill: \"#dfe7f4\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6-25.78 72.99c-2.792 7.888-11.443 11.903-19.14 9.15-7.81-2.76-11.91-11.33-9.15-19.14l54.07-153.1 25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6v-90.1l25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#dfe7f4\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEmbed);\nexport default __webpack_public_path__ + \"static/media/embed.289f71beedf481a4fab870e9fed16fec.svg\";\nexport { ForwardRef as ReactComponent };","import client from './client'\n\nconst getAllAPIKeys = () => client.get('/apikey')\n\nconst createNewAPI = (body) => client.post(`/apikey`, body)\n\nconst updateAPI = (id, body) => client.put(`/apikey/${id}`, body)\n\nconst deleteAPI = (id) => client.delete(`/apikey/${id}`)\n\nexport default {\n    getAllAPIKeys,\n    createNewAPI,\n    updateAPI,\n    deleteAPI\n}\n","import { createPortal } from 'react-dom'\nimport { useNavigate } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport {\n    Tabs,\n    Tab,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Box,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Typography\n} from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// Project import\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\nimport ShareChatbot from './ShareChatbot'\nimport EmbedChat from './EmbedChat'\n\n// Const\nimport { baseURL } from 'store/constant'\nimport { SET_CHATFLOW } from 'store/actions'\n\n// Images\nimport pythonSVG from 'assets/images/python.svg'\nimport javascriptSVG from 'assets/images/javascript.svg'\nimport cURLSVG from 'assets/images/cURL.svg'\nimport EmbedSVG from 'assets/images/embed.svg'\nimport ShareChatbotSVG from 'assets/images/sharing.png'\n\n// API\nimport apiKeyApi from 'api/apikey'\nimport chatflowsApi from 'api/chatflows'\nimport configApi from 'api/config'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\nimport { TableViewOnly } from 'ui-component/table/Table'\n\nimport { IconBulb } from '@tabler/icons'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst unshiftFiles = (configData) => {\n    const filesConfig = configData.find((config) => config.name === 'files')\n    if (filesConfig) {\n        configData = configData.filter((config) => config.name !== 'files')\n        configData.unshift(filesConfig)\n    }\n    return configData\n}\n\nconst getConfigExamplesForJS = (configData, bodyType) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `\"example\"`\n        if (config.type === 'string') exampleVal = `\"example\"`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.name === 'files') exampleVal = `input.files[0]`\n        finalStr += bodyType === 'json' ? `\\n      \"${config.name}\": ${exampleVal},` : `formData.append(\"${config.name}\", ${exampleVal})\\n`\n        if (i === loop - 1 && bodyType !== 'json') finalStr += `formData.append(\"question\", \"Hey, how are you?\")\\n`\n    }\n    return finalStr\n}\n\nconst getConfigExamplesForPython = (configData, bodyType) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `\"example\"`\n        if (config.type === 'string') exampleVal = `\"example\"`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.name === 'files') continue\n        finalStr += bodyType === 'json' ? `\\n        \"${config.name}\": ${exampleVal},` : `\\n    \"${config.name}\": ${exampleVal},`\n        if (i === loop - 1 && bodyType !== 'json') finalStr += `\\n    \"question\": \"Hey, how are you?\"\\n`\n    }\n    return finalStr\n}\n\nconst getConfigExamplesForCurl = (configData, bodyType) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `example`\n        if (config.type === 'string') exampleVal = bodyType === 'json' ? `\"example\"` : `example`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.name === 'files') exampleVal = `@/home/user1/Desktop/example${config.type}`\n        finalStr += bodyType === 'json' ? `\"${config.name}\": ${exampleVal}` : `\\n     -F \"${config.name}=${exampleVal}\"`\n        if (i === loop - 1) finalStr += bodyType === 'json' ? ` }` : ` \\\\\\n     -F \"question=Hey, how are you?\"`\n        else finalStr += bodyType === 'json' ? `, ` : ` \\\\`\n    }\n    return finalStr\n}\n\nconst APICodeDialog = ({ show, dialogProps, onCancel }) => {\n    // const portalElement = document.getElementById('portal')\n    const [portalElement, setPortalElement] = useState(null);\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        setPortalElement(document.getElementById('portal'));\n    }, [show]);\n\n    const codes = ['Embed', 'Python', 'JavaScript', 'cURL', 'Share Chatbot']\n    const [value, setValue] = useState(0)\n    const [keyOptions, setKeyOptions] = useState([])\n    const [apiKeys, setAPIKeys] = useState([])\n    const [chatflowApiKeyId, setChatflowApiKeyId] = useState('')\n    const [selectedApiKey, setSelectedApiKey] = useState({})\n    const [checkboxVal, setCheckbox] = useState(false)\n    const [nodeConfig, setNodeConfig] = useState({})\n    const [nodeConfigExpanded, setNodeConfigExpanded] = useState({})\n\n    const getAllAPIKeysApi = useApi(apiKeyApi.getAllAPIKeys)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n    const getConfigApi = useApi(configApi.getConfig)\n\n    const onCheckBoxChanged = (newVal) => {\n        setCheckbox(newVal)\n        if (newVal) {\n            getConfigApi.request(dialogProps.chatflowid)\n        }\n    }\n\n    const onApiKeySelected = (keyValue) => {\n        if (keyValue === 'addnewkey') {\n            navigate('/apikey')\n            return\n        }\n        setChatflowApiKeyId(keyValue)\n        setSelectedApiKey(apiKeys.find((key) => key.id === keyValue))\n        const updateBody = {\n            apikeyid: keyValue\n        }\n        updateChatflowApi.request(dialogProps.chatflowid, updateBody)\n    }\n\n    const groupByNodeLabel = (nodes, isFilter = false) => {\n        const accordianNodes = {}\n        const result = nodes.reduce(function (r, a) {\n            r[a.node] = r[a.node] || []\n            r[a.node].push(a)\n            accordianNodes[a.node] = isFilter ? true : false\n            return r\n        }, Object.create(null))\n        setNodeConfig(result)\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\n        const accordianNodes = { ...nodeConfigExpanded }\n        accordianNodes[nodeLabel] = isExpanded\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n        }\n    }, [updateChatflowApi.data, dispatch])\n\n    useEffect(() => {\n        if (getConfigApi.data) {\n            groupByNodeLabel(getConfigApi.data)\n        }\n    }, [getConfigApi.data])\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    const getCodeWithAuthorization = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getLang = (codeLang) => {\n        if (codeLang === 'Python') {\n            return 'python'\n        } else if (codeLang === 'JavaScript') {\n            return 'javascript'\n        } else if (codeLang === 'cURL') {\n            return 'bash'\n        }\n        return 'python'\n    }\n\n    const getSVG = (codeLang) => {\n        if (codeLang === 'Python') {\n            return pythonSVG\n        } else if (codeLang === 'JavaScript') {\n            return javascriptSVG\n        } else if (codeLang === 'Embed') {\n            return EmbedSVG\n        } else if (codeLang === 'cURL') {\n            return cURLSVG\n        } else if (codeLang === 'Share Chatbot') {\n            return ShareChatbotSVG\n        }\n        return pythonSVG\n    }\n\n    // ----------------------------CONFIG FORM DATA --------------------------//\n\n    const getConfigCodeWithFormData = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            const fileType = configData[0].type\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG FORM DATA with AUTH--------------------------//\n\n    const getConfigCodeWithFormDataWithAuth = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            const fileType = configData[0].type\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, headers=headers, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: { Authorization: \"Bearer ${selectedApiKey?.apiKey}\" },\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON--------------------------//\n\n    const getConfigCode = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON with AUTH--------------------------//\n\n    const getConfigCodeWithAuthorization = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getMultiConfigCodeWithFormData = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `body_data = {\n    \"openAIApiKey[chatOpenAI_0]\": \"sk-my-openai-1st-key\",\n    \"openAIApiKey[openAIEmbeddings_0]\": \"sk-my-openai-2nd-key\"\n}`\n        } else if (codeLang === 'JavaScript') {\n            return `formData.append(\"openAIApiKey[chatOpenAI_0]\", \"sk-my-openai-1st-key\")\nformData.append(\"openAIApiKey[openAIEmbeddings_0]\", \"sk-my-openai-2nd-key\")`\n        } else if (codeLang === 'cURL') {\n            return `-F \"openAIApiKey[chatOpenAI_0]=sk-my-openai-1st-key\" \\\\\n-F \"openAIApiKey[openAIEmbeddings_0]=sk-my-openai-2nd-key\" \\\\`\n        }\n    }\n\n    const getMultiConfigCode = () => {\n        return `{\n    \"overrideConfig\": {\n        \"openAIApiKey\": {\n            \"chatOpenAI_0\": \"sk-my-openai-1st-key\",\n            \"openAIEmbeddings_0\": \"sk-my-openai-2nd-key\"\n        }\n    }\n}`\n    }\n\n    useEffect(() => {\n        if (getAllAPIKeysApi.data) {\n            const options = [\n                {\n                    label: 'No Authorization',\n                    name: ''\n                }\n            ]\n            for (const key of getAllAPIKeysApi.data) {\n                options.push({\n                    label: key.keyName,\n                    name: key.id\n                })\n            }\n            options.push({\n                label: '- Add New Key -',\n                name: 'addnewkey'\n            })\n            setKeyOptions(options)\n            setAPIKeys(getAllAPIKeysApi.data)\n\n            if (dialogProps.chatflowApiKeyId) {\n                setChatflowApiKeyId(dialogProps.chatflowApiKeyId)\n                setSelectedApiKey(getAllAPIKeysApi.data.find((key) => key.id === dialogProps.chatflowApiKeyId))\n            }\n        }\n    }, [dialogProps, getAllAPIKeysApi.data])\n\n    useEffect(() => {\n        if (show) {\n            getAllAPIKeysApi.request()\n            getIsChatflowStreamingApi.request(dialogProps.chatflowid)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [show])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    <div style={{ flex: 80 }}>\n                        <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                            {codes.map((codeLang, index) => (\n                                <Tab\n                                    icon={\n                                        <img style={{ objectFit: 'cover', height: 15, width: 'auto' }} src={getSVG(codeLang)} alt='code' />\n                                    }\n                                    iconPosition='start'\n                                    key={index}\n                                    label={codeLang}\n                                    {...a11yProps(index)}\n                                ></Tab>\n                            ))}\n                        </Tabs>\n                    </div>\n                    <div style={{ flex: 20 }}>\n                        <Dropdown\n                            name='SelectKey'\n                            disableClearable={true}\n                            options={keyOptions}\n                            onSelect={(newValue) => onApiKeySelected(newValue)}\n                            value={dialogProps.chatflowApiKeyId ?? chatflowApiKeyId ?? 'Choose an API key'}\n                        />\n                    </div>\n                </div>\n                <div style={{ marginTop: 10 }}></div>\n                {codes.map((codeLang, index) => (\n                    <TabPanel key={index} value={value} index={index}>\n                        {(codeLang === 'Embed' || codeLang === 'Share Chatbot') && chatflowApiKeyId && (\n                            <>\n                                <p>You cannot use API key while embedding/sharing chatbot.</p>\n                                <p>\n                                    Please select <b>&quot;No Authorization&quot;</b> from the dropdown at the top right corner.\n                                </p>\n                            </>\n                        )}\n                        {codeLang === 'Embed' && !chatflowApiKeyId && <EmbedChat chatflowid={dialogProps.chatflowid} />}\n                        {codeLang !== 'Embed' && codeLang !== 'Share Chatbot' && (\n                            <>\n                                <CopyBlock\n                                    theme={atomOneDark}\n                                    text={chatflowApiKeyId ? getCodeWithAuthorization(codeLang) : getCode(codeLang)}\n                                    language={getLang(codeLang)}\n                                    showLineNumbers={false}\n                                    wrapLines\n                                />\n                                <CheckboxInput label='Show Input Config' value={checkboxVal} onChange={onCheckBoxChanged} />\n                                {checkboxVal && getConfigApi.data && getConfigApi.data.length > 0 && (\n                                    <>\n                                        {Object.keys(nodeConfig)\n                                            .sort()\n                                            .map((nodeLabel) => (\n                                                <Accordion\n                                                    expanded={nodeConfigExpanded[nodeLabel] || false}\n                                                    onChange={handleAccordionChange(nodeLabel)}\n                                                    key={nodeLabel}\n                                                    disableGutters\n                                                >\n                                                    <AccordionSummary\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        aria-controls={`nodes-accordian-${nodeLabel}`}\n                                                        id={`nodes-accordian-header-${nodeLabel}`}\n                                                    >\n                                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                                            <Typography variant='h5'>{nodeLabel}</Typography>\n                                                            <div\n                                                                style={{\n                                                                    display: 'flex',\n                                                                    flexDirection: 'row',\n                                                                    width: 'max-content',\n                                                                    borderRadius: 15,\n                                                                    background: 'rgb(254,252,191)',\n                                                                    padding: 5,\n                                                                    paddingLeft: 10,\n                                                                    paddingRight: 10,\n                                                                    marginLeft: 10\n                                                                }}\n                                                            >\n                                                                <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>\n                                                                    {nodeConfig[nodeLabel][0].nodeId}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <TableViewOnly\n                                                            rows={nodeConfig[nodeLabel]}\n                                                            columns={Object.keys(nodeConfig[nodeLabel][0]).slice(-3)}\n                                                        />\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            ))}\n                                        <CopyBlock\n                                            theme={atomOneDark}\n                                            text={\n                                                chatflowApiKeyId\n                                                    ? dialogProps.isFormDataRequired\n                                                        ? getConfigCodeWithFormDataWithAuth(codeLang, getConfigApi.data)\n                                                        : getConfigCodeWithAuthorization(codeLang, getConfigApi.data)\n                                                    : dialogProps.isFormDataRequired\n                                                    ? getConfigCodeWithFormData(codeLang, getConfigApi.data)\n                                                    : getConfigCode(codeLang, getConfigApi.data)\n                                            }\n                                            language={getLang(codeLang)}\n                                            showLineNumbers={false}\n                                            wrapLines\n                                        />\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                borderRadius: 10,\n                                                background: '#d8f3dc',\n                                                padding: 10,\n                                                marginTop: 10,\n                                                marginBottom: 10\n                                            }}\n                                        >\n                                            <div\n                                                style={{\n                                                    display: 'flex',\n                                                    flexDirection: 'row',\n                                                    alignItems: 'center'\n                                                }}\n                                            >\n                                                <IconBulb size={30} color='#2d6a4f' />\n                                                <span style={{ color: '#2d6a4f', marginLeft: 10, fontWeight: 500 }}>\n                                                    You can also specify multiple values for a config parameter by specifying the node id\n                                                </span>\n                                            </div>\n                                            <div style={{ padding: 10 }}>\n                                                <CopyBlock\n                                                    theme={atomOneDark}\n                                                    text={\n                                                        dialogProps.isFormDataRequired\n                                                            ? getMultiConfigCodeWithFormData(codeLang)\n                                                            : getMultiConfigCode()\n                                                    }\n                                                    language={getLang(codeLang)}\n                                                    showLineNumbers={false}\n                                                    wrapLines\n                                                />\n                                            </div>\n                                        </div>\n                                    </>\n                                )}\n                                {getIsChatflowStreamingApi.data?.isStreaming && (\n                                    <p>\n                                        Read&nbsp;\n                                        <a rel='noreferrer' target='_blank' href='https://docs.flowiseai.com/how-to-use#streaming'>\n                                            here\n                                        </a>\n                                        &nbsp;on how to stream response back to application\n                                    </p>\n                                )}\n                            </>\n                        )}\n                        {codeLang === 'Share Chatbot' && !chatflowApiKeyId && (\n                            <ShareChatbot isSessionMemory={dialogProps.isSessionMemory} />\n                        )}\n                    </TabPanel>\n                ))}\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return portalElement ? createPortal(component, portalElement) : null;\n}\n\nAPICodeDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default APICodeDialog\n","import { styled } from '@mui/material/styles'\nimport { Fab } from '@mui/material'\n\nexport const StyledFab = styled(Fab)(({ theme, color = 'primary' }) => ({\n    color: 'white',\n    backgroundColor: theme.palette[color].main,\n    '&:hover': {\n        backgroundColor: theme.palette[color].main,\n        backgroundImage: `linear-gradient(rgb(0 0 0/10%) 0 0)`\n    }\n}))\n","import PropTypes from 'prop-types'\nimport { useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useEffect, useRef, useState } from 'react'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport { Avatar, Box, ButtonBase, Typography, Stack, TextField, Fab, Button } from '@mui/material'\nimport QuizIcon from '@mui/icons-material/Quiz'\n\n// icons\nimport { IconSettings, IconChevronLeft, IconDeviceFloppy, IconPencil, IconCheck, IconX, IconCode } from '@tabler/icons'\n\n// project imports\n// import Settings from 'views/settings'\nimport SaveChatflowDialog from 'ui-component/dialog/SaveChatflowDialog'\nimport APICodeDialog from 'views/chatflows/APICodeDialog'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// utils\nimport { generateExportFlowData } from 'utils/genericHelper'\nimport { uiBaseURL } from 'store/constant'\nimport { SET_CHATFLOW } from 'store/actions'\nimport { PushPin } from '@mui/icons-material'\nimport { StyledFab } from 'ui-component/button/StyledFab'\n\n// ==============================|| CANVAS HEADER ||============================== //\n\nconst CanvasHeader = ({ chatflow, handleSaveFlow, handleDeleteFlow, handleLoadFlow, openChatBox, templateFlowData, agentflowName }) => {\n    const theme = useTheme()\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const flowNameRef = useRef()\n    const settingsRef = useRef()\n\n    const [isEditingFlowName, setEditingFlowName] = useState(null)\n    const [flowName, setFlowName] = useState('')\n    const [isSettingsOpen, setSettingsOpen] = useState(false)\n    const [flowDialogOpen, setFlowDialogOpen] = useState(false)\n    const [apiDialogOpen, setAPIDialogOpen] = useState(false)\n    const [apiDialogProps, setAPIDialogProps] = useState({})\n\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const canvas = useSelector((state) => state.canvas)\n\n    const onSettingsItemClick = (setting) => {\n        console.log('hhh')\n        setSettingsOpen(false)\n\n        if (setting === 'deleteChatflow') {\n            handleDeleteFlow()\n        } else if (setting === 'duplicateChatflow') {\n            try {\n                localStorage.setItem('duplicatedFlowData', chatflow.flowData)\n                window.open(`${uiBaseURL}/canvas`, '_blank')\n            } catch (e) {\n                console.error(e)\n            }\n        } else if (setting === 'exportChatflow') {\n            try {\n                const flowData = JSON.parse(chatflow.flowData)\n                let dataStr = JSON.stringify(generateExportFlowData(flowData))\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n                let exportFileDefaultName = `${chatflow.name} Chatflow.json`\n\n                let linkElement = document.createElement('a')\n                linkElement.setAttribute('href', dataUri)\n                linkElement.setAttribute('download', exportFileDefaultName)\n                linkElement.click()\n            } catch (e) {\n                console.error(e)\n            }\n        }\n    }\n\n    const onUploadFile = (file) => {\n        setSettingsOpen(false)\n        handleLoadFlow(file)\n    }\n\n    const submitFlowName = () => {\n        if (chatflow.id) {\n            const updateBody = {\n                name: flowNameRef.current.value\n            }\n            updateChatflowApi.request(chatflow.id, updateBody)\n        }\n    }\n\n    const onAPIDialogClick = () => {\n        // If file type is file, isFormDataRequired = true\n        let isFormDataRequired = false\n        try {\n            const flowData = JSON.parse(chatflow.flowData)\n            const nodes = flowData.nodes\n            for (const node of nodes) {\n                if (node.data.inputParams.find((param) => param.type === 'file')) {\n                    isFormDataRequired = true\n                    break\n                }\n            }\n        } catch (e) {\n            console.error(e)\n        }\n\n        // If sessionId memory, isSessionMemory = true\n        let isSessionMemory = false\n        try {\n            const flowData = JSON.parse(chatflow.flowData)\n            const nodes = flowData.nodes\n            for (const node of nodes) {\n                if (node.data.inputParams.find((param) => param.name === 'sessionId')) {\n                    isSessionMemory = true\n                    break\n                }\n            }\n        } catch (e) {\n            console.error(e)\n        }\n\n        setAPIDialogProps({\n            title: 'Embed in website or use as API',\n            chatflowid: chatflow.id,\n            chatflowApiKeyId: chatflow.apikeyid,\n            isFormDataRequired,\n            isSessionMemory\n        })\n        setAPIDialogOpen(true)\n    }\n\n    const onSaveChatflowClick = () => {\n        \n        if (chatflow.id) handleSaveFlow(flowName)\n        else setFlowDialogOpen(true)\n    }\n\n    const onConfirmSaveName = (flowName) => {\n        setFlowDialogOpen(false)\n        handleSaveFlow(flowName)\n    }\n\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            setFlowName(updateChatflowApi.data.name)\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n        }\n        setEditingFlowName(false)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updateChatflowApi.data])\n\n    useEffect(() => {\n        if (chatflow) {\n            setFlowName(chatflow.name)\n        }\n    }, [chatflow])\n\n    return (\n        <>\n            <Box>\n                <ButtonBase title='Back' sx={{ borderRadius: '50%' }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.secondary.light,\n                            color: theme.palette.secondary.dark,\n                            '&:hover': {\n                                background: theme.palette.secondary.dark,\n                                color: theme.palette.secondary.light\n                            }\n                        }}\n                        color='inherit'\n                        onClick={() =>\n                            window.history.state && window.history.state.idx > 0 ? navigate(-1) : navigate('/', { replace: true })\n                        }\n                    >\n                        <IconChevronLeft stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase>\n            </Box>\n            <Box sx={{ flexGrow: 1 }}>\n                {!isEditingFlowName && (\n                    <Stack flexDirection='row' sx={{ justifyContent: 'center' }}>\n                        <Typography\n                            sx={{\n                                fontSize: '1.5rem',\n                                fontWeight: 600,\n                                ml: 2\n                            }}\n                        >\n                            {canvas.isDirty && <strong style={{ color: theme.palette.orange.main }}>*</strong>} {templateFlowData ? templateFlowData.name : agentflowName ? agentflowName : flowName}\n                        </Typography>\n                        {chatflow?.id && (\n                            <ButtonBase title='Edit Name' sx={{ borderRadius: '50%' }}>\n                                <Avatar\n                                    variant='rounded'\n                                    sx={{\n                                        ...theme.typography.commonAvatar,\n                                        ...theme.typography.mediumAvatar,\n                                        transition: 'all .2s ease-in-out',\n                                        ml: 1,\n                                        background: theme.palette.secondary.light,\n                                        color: theme.palette.secondary.dark,\n                                        '&:hover': {\n                                            background: theme.palette.secondary.dark,\n                                            color: theme.palette.secondary.light\n                                        }\n                                    }}\n                                    color='inherit'\n                                    onClick={() => setEditingFlowName(true)}\n                                >\n                                    <IconPencil stroke={1.5} size='1.3rem' />\n                                </Avatar>\n                            </ButtonBase>\n                        )}\n                    </Stack>\n                )}\n                {isEditingFlowName && (\n                    <Stack flexDirection='row'>\n                        <TextField\n                            size='small'\n                            inputRef={flowNameRef}\n                            sx={{\n                                width: '50%',\n                                ml: 2\n                            }}\n                            defaultValue={flowName}\n                        />\n                        <ButtonBase title='Save Name' sx={{ borderRadius: '50%' }}>\n                            <Avatar\n                                variant='rounded'\n                                sx={{\n                                    ...theme.typography.commonAvatar,\n                                    ...theme.typography.mediumAvatar,\n                                    transition: 'all .2s ease-in-out',\n                                    background: theme.palette.success.light,\n                                    color: theme.palette.success.dark,\n                                    ml: 1,\n                                    '&:hover': {\n                                        background: theme.palette.success.dark,\n                                        color: theme.palette.success.light\n                                    }\n                                }}\n                                color='inherit'\n                                onClick={submitFlowName}\n                            >\n                                <IconCheck stroke={1.5} size='1.3rem' />\n                            </Avatar>\n                        </ButtonBase>\n                        <ButtonBase title='Cancel' sx={{ borderRadius: '50%' }}>\n                            <Avatar\n                                variant='rounded'\n                                sx={{\n                                    ...theme.typography.commonAvatar,\n                                    ...theme.typography.mediumAvatar,\n                                    transition: 'all .2s ease-in-out',\n                                    background: theme.palette.error.light,\n                                    color: theme.palette.error.dark,\n                                    ml: 1,\n                                    '&:hover': {\n                                        background: theme.palette.error.dark,\n                                        color: theme.palette.error.light\n                                    }\n                                }}\n                                color='inherit'\n                                onClick={() => setEditingFlowName(false)}\n                            >\n                                <IconX stroke={1.5} size='1.3rem' />\n                            </Avatar>\n                        </ButtonBase>\n                    </Stack>\n                )}\n            </Box>\n            <Box>\n                {chatflow?.id && (\n                    <ButtonBase title='API Endpoint' sx={{ borderRadius: '50%', mr: 2 }}>\n                        <Avatar\n                            variant='rounded'\n                            sx={{\n                                ...theme.typography.commonAvatar,\n                                ...theme.typography.mediumAvatar,\n                                transition: 'all .2s ease-in-out',\n                                background: theme.palette.canvasHeader.deployLight,\n                                color: theme.palette.canvasHeader.deployDark,\n                                '&:hover': {\n                                    background: theme.palette.canvasHeader.deployDark,\n                                    color: theme.palette.canvasHeader.deployLight\n                                }\n                            }}\n                            color='inherit'\n                            onClick={onAPIDialogClick}\n                        >\n                            <IconCode stroke={1.5} size='1.3rem' />\n                        </Avatar>\n                    </ButtonBase>\n                )}\n                {/* <ButtonBase title='Save Chatflow' sx={{ borderRadius: '50%', mr: 2 }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.canvasHeader.saveLight,\n                            color: theme.palette.canvasHeader.saveDark,\n                            '&:hover': {\n                                background: theme.palette.canvasHeader.saveDark,\n                                color: theme.palette.canvasHeader.saveLight\n                            }\n                        }}\n                        color='inherit'\n                        onClick={onSaveChatflowClick}\n                    >\n                        <IconDeviceFloppy stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase> */}\n                <Button variant=\"outlined\"\n                    sx={{ marginRight: '2px' }}\n                    size='small'\n                    aria-label='save'\n                    title='Save'\n                    onClick={onSaveChatflowClick}\n                >\n                    <IconDeviceFloppy stroke={1.5} size='1.3rem' /> Save\n                </Button>\n                {/* <ButtonBase ref={settingsRef} title='Settings' sx={{ borderRadius: '50%' }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.canvasHeader.settingsLight,\n                            color: theme.palette.canvasHeader.settingsDark,\n                            '&:hover': {\n                                background: theme.palette.canvasHeader.settingsDark,\n                                color: theme.palette.canvasHeader.settingsLight\n                            }\n                        }}\n                        onClick={() => setSettingsOpen(!isSettingsOpen)}\n                    >\n                        <IconSettings stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase> */}\n                {/* <ButtonBase ref={settingsRef} title='Test' sx={{ borderRadius: '50%', mr: 2 }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.canvasHeader.saveLight,\n                            color: theme.palette.canvasHeader.saveDark,\n                            '&:hover': {\n                                background: theme.palette.canvasHeader.saveDark,\n                                color: theme.palette.canvasHeader.saveLight\n                            }\n                        }}\n                        onClick={() => {\n                            openChatBox()\n                        }}\n                    >\n                        <QuizIcon stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase> */}\n                <Button variant=\"outlined\"\n                    sx={{ marginRight: '2px' }}\n                    size='small'\n                    aria-label='test'\n                    title='Test'\n                    onClick={() => {\n                        openChatBox()\n                    }}\n                >\n                    <QuizIcon stroke={1.5} size='1.3rem' /> Test\n                </Button>\n                {/* <ButtonBase ref={settingsRef} title='Deploy' sx={{ borderRadius: '50%', mr: 2 }}>\n                    <Avatar\n                        variant='rounded'\n                        sx={{\n                            ...theme.typography.commonAvatar,\n                            ...theme.typography.mediumAvatar,\n                            transition: 'all .2s ease-in-out',\n                            background: theme.palette.canvasHeader.saveLight,\n                            color: theme.palette.canvasHeader.saveDark,\n                            '&:hover': {\n                                background: theme.palette.canvasHeader.saveDark,\n                                color: theme.palette.canvasHeader.saveLight\n                            }\n                        }}\n                        onClick={() => setSettingsOpen(!isSettingsOpen)}\n                    >\n                        <PushPin stroke={1.5} size='1.3rem' />\n                    </Avatar>\n                </ButtonBase> */}\n                <Button variant=\"outlined\"\n                    size='small'\n                    aria-label='deploy'\n                    title='Deploy'\n                    onClick={() => setSettingsOpen(!isSettingsOpen)}\n                >\n                    <PushPin stroke={1.5} size='1.3rem' /> Deploy\n                </Button>\n            </Box>\n            {/* <Settings\n                chatflow={chatflow}\n                isSettingsOpen={isSettingsOpen}\n                anchorEl={settingsRef.current}\n                onClose={() => setSettingsOpen(false)}\n                onSettingsItemClick={onSettingsItemClick}\n                onUploadFile={onUploadFile}\n            /> */}\n            <SaveChatflowDialog\n                show={flowDialogOpen}\n                dialogProps={{\n                    title: `Save New Chatflow`,\n                    confirmButtonName: 'Save',\n                    cancelButtonName: 'Cancel'\n                }}\n                onCancel={() => setFlowDialogOpen(false)}\n                onConfirm={onConfirmSaveName}\n            />\n            <APICodeDialog show={apiDialogOpen} dialogProps={apiDialogProps} onCancel={() => setAPIDialogOpen(false)} />\n        </>\n    )\n}\n\nCanvasHeader.propTypes = {\n    chatflow: PropTypes.object,\n    handleSaveFlow: PropTypes.func,\n    handleDeleteFlow: PropTypes.func,\n    handleLoadFlow: PropTypes.func,\n    openChatBox: PropTypes.func,\n    templateFlowData: PropTypes.any,\n    agentflowName: PropTypes.string\n}\n\nexport default CanvasHeader\n","import PropTypes from 'prop-types'\nimport { forwardRef } from 'react'\n\n// material-ui\nimport { Collapse, Fade, Box, Grow, Slide, Zoom } from '@mui/material'\n\n// ==============================|| TRANSITIONS ||============================== //\n\nconst Transitions = forwardRef(function Transitions({ children, position, type, direction, ...others }, ref) {\n    let positionSX = {\n        transformOrigin: '0 0 0'\n    }\n\n    switch (position) {\n        case 'top-right':\n            positionSX = {\n                transformOrigin: 'top right'\n            }\n            break\n        case 'top':\n            positionSX = {\n                transformOrigin: 'top'\n            }\n            break\n        case 'bottom-left':\n            positionSX = {\n                transformOrigin: 'bottom left'\n            }\n            break\n        case 'bottom-right':\n            positionSX = {\n                transformOrigin: 'bottom right'\n            }\n            break\n        case 'bottom':\n            positionSX = {\n                transformOrigin: 'bottom'\n            }\n            break\n        case 'top-left':\n        default:\n            positionSX = {\n                transformOrigin: '0 0 0'\n            }\n            break\n    }\n\n    return (\n        <Box ref={ref}>\n            {type === 'grow' && (\n                <Grow {...others}>\n                    <Box sx={positionSX}>{children}</Box>\n                </Grow>\n            )}\n            {type === 'collapse' && (\n                <Collapse {...others} sx={positionSX}>\n                    {children}\n                </Collapse>\n            )}\n            {type === 'fade' && (\n                <Fade\n                    {...others}\n                    timeout={{\n                        appear: 500,\n                        enter: 600,\n                        exit: 400\n                    }}\n                >\n                    <Box sx={positionSX}>{children}</Box>\n                </Fade>\n            )}\n            {type === 'slide' && (\n                <Slide\n                    {...others}\n                    timeout={{\n                        appear: 0,\n                        enter: 400,\n                        exit: 200\n                    }}\n                    direction={direction}\n                >\n                    <Box sx={positionSX}>{children}</Box>\n                </Slide>\n            )}\n            {type === 'zoom' && (\n                <Zoom {...others}>\n                    <Box sx={positionSX}>{children}</Box>\n                </Zoom>\n            )}\n        </Box>\n    )\n})\n\nTransitions.propTypes = {\n    children: PropTypes.node,\n    type: PropTypes.oneOf(['grow', 'fade', 'collapse', 'slide', 'zoom']),\n    position: PropTypes.oneOf(['top-left', 'top-right', 'top', 'bottom-left', 'bottom-right', 'bottom']),\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right'])\n}\n\nTransitions.defaultProps = {\n    type: 'grow',\n    position: 'top-left',\n    direction: 'up'\n}\n\nexport default Transitions\n","import React ,{ useState, useRef, useEffect } from 'react'\n\n// import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport {\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Box,\n    ClickAwayListener,\n    Divider,\n    InputAdornment,\n    List,\n    ListItemButton,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    OutlinedInput,\n    Paper,\n    Popper,\n    Stack,\n    Typography,\n    Button\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport { StyledFab } from 'ui-component/button/StyledFab'\n\n// icons\nimport { IconPlus, IconSearch, IconMinus, IconX } from '@tabler/icons'\nimport CloseIcon from '@mui/icons-material/Close'\n\n// const\nimport { baseURL } from 'store/constant'\nimport { SET_COMPONENT_NODES } from 'store/actions'\nimport ToolEditModal from 'views/tools/ToolEditModal'\nimport ToolCreateModal from 'views/tools/ToolCreateModal'\n\n// ==============================|| ADD NODES||============================== //\n\nconst AddNodes = ({ nodesData, node, setAddNode }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n    const dispatch = useDispatch()\n\n    const [searchValue, setSearchValue] = useState('')\n    const [nodes, setNodes] = useState({})\n    const [open, setOpen] = useState(false)\n    const [categoryExpanded, setCategoryExpanded] = useState({})\n    const [addNodeValue, setAddNodeValue] = useState('')\n    const [openCreateNodeModal, setOpenCreateNodeModal] = React.useState(false)\n\n\n    const anchorRef = useRef(null)\n    const prevOpen = useRef(open)\n    const ps = useRef()\n\n    const scrollTop = () => {\n        const curr = ps.current\n        if (curr) {\n            curr.scrollTop = 0\n        }\n    }\n\n    const handleNodeAI = () => {\n        setOpenCreateNodeModal(true)\n    }\n\n    const getSearchedNodes = (value) => {\n        const passed = nodesData.filter((nd) => {\n            const passesQuery = nd.name.toLowerCase().includes(value.toLowerCase())\n            const passesCategory = nd.category.toLowerCase().includes(value.toLowerCase())\n            return passesQuery || passesCategory\n        })\n        return passed\n    }\n\n    const filterSearch = (value) => {\n        setSearchValue(value)\n        setTimeout(() => {\n            if (value) {\n                const returnData = getSearchedNodes(value)\n                groupByCategory(returnData, true)\n                scrollTop()\n            } else if (value === '') {\n                groupByCategory(nodesData)\n                scrollTop()\n            }\n        }, 500)\n    }\n\n    const groupByCategory = (nodes, isFilter) => {\n        const accordianCategories = {}\n        const result = nodes.reduce(function (r, a) {\n            r[a.category] = r[a.category] || []\n            r[a.category].push(a)\n            accordianCategories[a.category] = isFilter ? true : false\n            return r\n        }, Object.create(null))\n        setNodes(result)\n        setCategoryExpanded(accordianCategories)\n    }\n\n    console.log(nodes)\n\n\n    const handleAccordionChange = (category) => (event, isExpanded) => {\n        const accordianCategories = { ...categoryExpanded }\n        accordianCategories[category] = isExpanded\n        setCategoryExpanded(accordianCategories)\n    }\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return\n        }\n        setOpen(false)\n    }\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen)\n    }\n\n    const onDragStart = (event, node) => {\n        event.dataTransfer.setData('application/reactflow', JSON.stringify(node))\n        event.dataTransfer.effectAllowed = 'move'\n    }\n\n    useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus()\n        }\n\n        prevOpen.current = open\n    }, [open])\n\n    useEffect(() => {\n        if (node) setOpen(false)\n    }, [node])\n\n    useEffect(() => {\n        if (nodesData) {\n            groupByCategory(nodesData)\n            dispatch({ type: SET_COMPONENT_NODES, componentNodes: nodesData })\n        }\n    }, [nodesData, dispatch])\n\n\n\n    return (\n        <>\n            <ToolCreateModal\n                show={openCreateNodeModal}\n                onCancel={() => setOpenCreateNodeModal(false)}\n            ></ToolCreateModal>\n            <Box sx={{ display: 'flex', justifyContent: 'end' }}>\n                <CloseIcon\n                    sx={{ borderRadius: '9px', marginRight: '4px', color: 'red', cursor: 'pointer' }}\n                    onClick={() => {\n                        setAddNode(false)\n                    }}\n                />\n            </Box>\n            <Box sx={{ px: 2 }}>\n                <Stack>\n                    <Typography variant='h4'>Add Nodes</Typography>\n                </Stack>\n                <OutlinedInput\n                    sx={{ width: '100%', pr: 2, pl: 2, my: 2 }}\n                    id='input-search-node'\n                    value={searchValue}\n                    onChange={(e) => filterSearch(e.target.value)}\n                    placeholder='Search nodes'\n                    startAdornment={\n                        <InputAdornment position='start'>\n                            <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\n                        </InputAdornment>\n                    }\n                    endAdornment={\n                        <InputAdornment\n                            position='end'\n                            sx={{\n                                cursor: 'pointer',\n                                color: theme.palette.grey[500],\n                                '&:hover': {\n                                    color: theme.palette.grey[900]\n                                }\n                            }}\n                            title='Clear Search'\n                        >\n                            <IconX\n                                stroke={1.5}\n                                size='1rem'\n                                onClick={() => filterSearch('')}\n                                style={{\n                                    cursor: 'pointer'\n                                }}\n                            />\n                        </InputAdornment>\n                    }\n                    aria-describedby='search-helper-text'\n                    inputProps={{\n                        'aria-label': 'weight'\n                    }}\n                />\n                <Divider />\n            </Box>\n            <Box sx={{ px: 2 }}>\n                <Button\n                    sx={{ width: '100%', pr: 1, pl: 2, my: 2 }}\n                    onClick={handleNodeAI}\n                    style={{\n                        cursor: 'pointer',\n                        background: 'cornflowerblue',\n                        color: 'white',\n                        borderRadius: '20px',\n                    }}\n                >Add Node Through AI</Button>\n                <Divider />\n            </Box>\n            <PerfectScrollbar\n                containerRef={(el) => {\n                    ps.current = el\n                }}\n                style={{ height: '100%', maxHeight: 'calc(100vh - 320px)', overflowX: 'hidden' }}\n            >\n                <Box sx={{ p: 2 }}>\n                    <List\n                        sx={{\n                            width: '100%',\n                            maxWidth: 370,\n                            py: 0,\n                            borderRadius: '10px',\n                            [theme.breakpoints.down('md')]: {\n                                maxWidth: 370\n                            },\n                            '& .MuiListItemSecondaryAction-root': {\n                                top: 22\n                            },\n                            '& .MuiDivider-root': {\n                                my: 0\n                            },\n                            '& .list-container': {\n                                pl: 7\n                            }\n                        }}\n                    >\n                        {Object.keys(nodes)\n                            .sort()\n                            .map((category) => (\n                                <Accordion\n                                    expanded={categoryExpanded[category] || false}\n                                    onChange={handleAccordionChange(category)}\n                                    key={category}\n                                    disableGutters\n                                >\n                                    <AccordionSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                        aria-controls={`nodes-accordian-${category}`}\n                                        id={`nodes-accordian-header-${category}`}\n                                    >\n                                        <Typography variant='h5'>{category}</Typography>\n                                    </AccordionSummary>\n                                    <AccordionDetails>\n                                        {nodes[category].map((node, index) => (\n                                            <div key={node.displayName} onDragStart={(event) => onDragStart(event, node)} draggable>\n                                                <ListItemButton\n                                                    sx={{\n                                                        p: 0,\n                                                        borderRadius: `${customization.borderRadius}px`,\n                                                        cursor: 'move'\n                                                    }}\n                                                >\n                                                    <ListItem alignItems='center'>\n                                                        <ListItemAvatar>\n                                                            <div\n                                                                style={{\n                                                                    width: 50,\n                                                                    height: 50,\n                                                                    borderRadius: '50%',\n                                                                    backgroundColor: 'white'\n                                                                }}\n                                                            >\n                                                                <img\n                                                                    style={{\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        padding: 10,\n                                                                        objectFit: 'contain'\n                                                                    }}\n                                                                    alt={node.displayName}\n                                                                    src={node.logoUrl}\n                                                                />\n                                                            </div>\n                                                        </ListItemAvatar>\n                                                        <ListItemText\n                                                            sx={{ ml: 1 }}\n                                                            primary={node?.displayName}\n                                                            secondary={node.description}\n                                                        />\n                                                    </ListItem>\n                                                </ListItemButton>\n                                                {index === nodes[category].length - 1 ? null : <Divider />}\n                                            </div>\n                                        ))}\n                                    </AccordionDetails>\n                                </Accordion>\n                            ))}\n                    </List>\n                </Box>\n            </PerfectScrollbar>\n            {/* <StyledFab\n                sx={{ left: 20, top: 20 }}\n                ref={anchorRef}\n                size='small'\n                aria-label='add'\n                title='Add Node'\n                variant='extended'\n                onClick={handleToggle}\n            >\n                {open ? <IconMinus /> : <IconPlus />} Add Nodes\n            </StyledFab>\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [-40, 14]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <Box sx={{ p: 2 }}>\n                                        <Stack>\n                                            <Typography variant='h4'>Add Nodes</Typography>\n                                        </Stack>\n                                        <OutlinedInput\n                                            sx={{ width: '100%', pr: 2, pl: 2, my: 2 }}\n                                            id='input-search-node'\n                                            value={searchValue}\n                                            onChange={(e) => filterSearch(e.target.value)}\n                                            placeholder='Search nodes'\n                                            startAdornment={\n                                                <InputAdornment position='start'>\n                                                    <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\n                                                </InputAdornment>\n                                            }\n                                            endAdornment={\n                                                <InputAdornment\n                                                    position='end'\n                                                    sx={{\n                                                        cursor: 'pointer',\n                                                        color: theme.palette.grey[500],\n                                                        '&:hover': {\n                                                            color: theme.palette.grey[900]\n                                                        }\n                                                    }}\n                                                    title='Clear Search'\n                                                >\n                                                    <IconX\n                                                        stroke={1.5}\n                                                        size='1rem'\n                                                        onClick={() => filterSearch('')}\n                                                        style={{\n                                                            cursor: 'pointer'\n                                                        }}\n                                                    />\n                                                </InputAdornment>\n                                            }\n                                            aria-describedby='search-helper-text'\n                                            inputProps={{\n                                                'aria-label': 'weight'\n                                            }}\n                                        />\n                                        <Divider />\n                                    </Box>\n                                    <PerfectScrollbar\n                                        containerRef={(el) => {\n                                            ps.current = el\n                                        }}\n                                        style={{ height: '100%', maxHeight: 'calc(100vh - 320px)', overflowX: 'hidden' }}\n                                    >\n                                        <Box sx={{ p: 2 }}>\n                                            <List\n                                                sx={{\n                                                    width: '100%',\n                                                    maxWidth: 370,\n                                                    py: 0,\n                                                    borderRadius: '10px',\n                                                    [theme.breakpoints.down('md')]: {\n                                                        maxWidth: 370\n                                                    },\n                                                    '& .MuiListItemSecondaryAction-root': {\n                                                        top: 22\n                                                    },\n                                                    '& .MuiDivider-root': {\n                                                        my: 0\n                                                    },\n                                                    '& .list-container': {\n                                                        pl: 7\n                                                    }\n                                                }}\n                                            >\n                                                {Object.keys(nodes)\n                                                    .sort()\n                                                    .map((category) => (\n                                                        <Accordion\n                                                            expanded={categoryExpanded[category] || false}\n                                                            onChange={handleAccordionChange(category)}\n                                                            key={category}\n                                                            disableGutters\n                                                        >\n                                                            <AccordionSummary\n                                                                expandIcon={<ExpandMoreIcon />}\n                                                                aria-controls={`nodes-accordian-${category}`}\n                                                                id={`nodes-accordian-header-${category}`}\n                                                            >\n                                                                <Typography variant='h5'>{category}</Typography>\n                                                            </AccordionSummary>\n                                                            <AccordionDetails>\n                                                                {nodes[category].map((node, index) => (\n                                                                    <div\n                                                                        key={node.displayName}\n                                                                        onDragStart={(event) => onDragStart(event, node)}\n                                                                        draggable\n                                                                    >\n                                                                        <ListItemButton\n                                                                            sx={{\n                                                                                p: 0,\n                                                                                borderRadius: `${customization.borderRadius}px`,\n                                                                                cursor: 'move'\n                                                                            }}\n                                                                        >\n                                                                            <ListItem alignItems='center'>\n                                                                                <ListItemAvatar>\n                                                                                    <div\n                                                                                        style={{\n                                                                                            width: 50,\n                                                                                            height: 50,\n                                                                                            borderRadius: '50%',\n                                                                                            backgroundColor: 'white'\n                                                                                        }}\n                                                                                    >\n                                                                                        <img\n                                                                                            style={{\n                                                                                                width: '100%',\n                                                                                                height: '100%',\n                                                                                                padding: 10,\n                                                                                                objectFit: 'contain'\n                                                                                            }}\n                                                                                            alt={node.displayName}\n                                                                                            src={node.logoUrl}\n                                                                                        />\n                                                                                    </div>\n                                                                                </ListItemAvatar>\n                                                                                <ListItemText\n                                                                                    sx={{ ml: 1 }}\n                                                                                    primary={node?.displayName}\n                                                                                    secondary={node.description}\n                                                                                />\n                                                                            </ListItem>\n                                                                        </ListItemButton>\n                                                                        {index === nodes[category].length - 1 ? null : <Divider />}\n                                                                    </div>\n                                                                ))}\n                                                            </AccordionDetails>\n                                                        </Accordion>\n                                                    ))}\n                                            </List>\n                                        </Box>\n                                    </PerfectScrollbar>\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper> */}\n        </>\n    )\n}\n\nAddNodes.propTypes = {\n    nodesData: PropTypes.array,\n    node: PropTypes.object,\n    setAddNode: PropTypes.func\n}\n\nexport default AddNodes\n","import { IconClipboard, IconDownload } from '@tabler/icons'\nimport { memo, useState } from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport PropTypes from 'prop-types'\nimport { Box, IconButton, Popover, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\nconst programmingLanguages = {\n    javascript: '.js',\n    python: '.py',\n    java: '.java',\n    c: '.c',\n    cpp: '.cpp',\n    'c++': '.cpp',\n    'c#': '.cs',\n    ruby: '.rb',\n    php: '.php',\n    swift: '.swift',\n    'objective-c': '.m',\n    kotlin: '.kt',\n    typescript: '.ts',\n    go: '.go',\n    perl: '.pl',\n    rust: '.rs',\n    scala: '.scala',\n    haskell: '.hs',\n    lua: '.lua',\n    shell: '.sh',\n    sql: '.sql',\n    html: '.html',\n    css: '.css'\n}\n\nexport const CodeBlock = memo(({ language, chatflowid, isDialog, value }) => {\n    const theme = useTheme()\n    const [anchorEl, setAnchorEl] = useState(null)\n    const openPopOver = Boolean(anchorEl)\n\n    const handleClosePopOver = () => {\n        setAnchorEl(null)\n    }\n\n    const copyToClipboard = (event) => {\n        if (!navigator.clipboard || !navigator.clipboard.writeText) {\n            return\n        }\n\n        navigator.clipboard.writeText(value)\n        setAnchorEl(event.currentTarget)\n        setTimeout(() => {\n            handleClosePopOver()\n        }, 1500)\n    }\n\n    const downloadAsFile = () => {\n        const fileExtension = programmingLanguages[language] || '.file'\n        const suggestedFileName = `file-${chatflowid}${fileExtension}`\n        const fileName = suggestedFileName\n\n        if (!fileName) {\n            // user pressed cancel on prompt\n            return\n        }\n\n        const blob = new Blob([value], { type: 'text/plain' })\n        const url = URL.createObjectURL(blob)\n        const link = document.createElement('a')\n        link.download = fileName\n        link.href = url\n        link.style.display = 'none'\n        document.body.appendChild(link)\n        link.click()\n        document.body.removeChild(link)\n        URL.revokeObjectURL(url)\n    }\n\n    return (\n        <div style={{ width: isDialog ? '' : 300 }}>\n            <Box sx={{ color: 'white', background: theme.palette?.common.dark, p: 1, borderTopLeftRadius: 10, borderTopRightRadius: 10 }}>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    {language}\n                    <div style={{ flex: 1 }}></div>\n                    <IconButton size='small' title='Copy' color='success' onClick={copyToClipboard}>\n                        <IconClipboard />\n                    </IconButton>\n                    <Popover\n                        open={openPopOver}\n                        anchorEl={anchorEl}\n                        onClose={handleClosePopOver}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right'\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left'\n                        }}\n                    >\n                        <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                            Copied!\n                        </Typography>\n                    </Popover>\n                    <IconButton size='small' title='Download' color='primary' onClick={downloadAsFile}>\n                        <IconDownload />\n                    </IconButton>\n                </div>\n            </Box>\n\n            <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\n                {value}\n            </SyntaxHighlighter>\n        </div>\n    )\n})\nCodeBlock.displayName = 'CodeBlock'\n\nCodeBlock.propTypes = {\n    language: PropTypes.string,\n    chatflowid: PropTypes.string,\n    isDialog: PropTypes.bool,\n    value: PropTypes.string\n}\n","import { memo } from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nexport const MemoizedReactMarkdown = memo(ReactMarkdown, (prevProps, nextProps) => prevProps.children === nextProps.children)\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\n// import ReactJson from 'flowise-react-json-view'\n\nconst SourceDocDialog = ({ show, dialogProps, onCancel }) => {\n    // const portalElement = document.getElementById('portal')\n    const [portalElement, setPortalElement] = useState(null);\n    const customization = useSelector((state) => state.customization)\n    useEffect(() => {\n        setPortalElement(document.getElementById('portal'));\n    }, [show]);\n    const [data, setData] = useState({})\n\n    useEffect(() => {\n        if (dialogProps.data) setData(dialogProps.data)\n\n        return () => {\n            setData({})\n        }\n    }, [dialogProps])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                Source Document\n            </DialogTitle>\n            <DialogContent>\n                {/* <ReactJson\n                    theme={customization.isDarkMode ? 'ocean' : 'rjv-default'}\n                    style={{ padding: 10, borderRadius: 10 }}\n                    src={data}\n                    name={null}\n                    quotesOnKeys={false}\n                    enableClipboard={false}\n                    displayDataTypes={false}\n                /> */}\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return portalElement ? createPortal(component, portalElement) : null;\n}\n\nSourceDocDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default SourceDocDialog\n","import client from './client'\n\nconst getChatmessageFromChatflow = (id) => client.get(`/chatmessage/${id}`)\n\nconst createNewChatmessage = (id, body) => client.post(`/chatmessage/${id}`, body)\n\nconst deleteChatmessage = (id) => client.delete(`/chatmessage/${id}`)\n\nexport default {\n    getChatmessageFromChatflow,\n    createNewChatmessage,\n    deleteChatmessage\n}\n","import client from './client'\n\nconst sendMessageAndGetPrediction = (id, input) => client.post(`/internal-prediction/${id}`, input)\n\nexport default {\n    sendMessageAndGetPrediction\n}\n","import { useState, useRef, useEffect, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport socketIOClient from 'socket.io-client'\nimport { cloneDeep } from 'lodash'\nimport rehypeMathjax from 'rehype-mathjax'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\n\nimport { CircularProgress, OutlinedInput, Divider, InputAdornment, IconButton, Box, Chip } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconSend } from '@tabler/icons'\n\n// project import\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\nimport './ChatMessage.css'\n\n// api\nimport chatmessageApi from 'api/chatmessage'\nimport chatflowsApi from 'api/chatflows'\nimport predictionApi from 'api/prediction'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// Const\nimport { baseURL, maxScroll } from 'store/constant'\n\nimport robotPNG from 'assets/images/robot.png'\nimport userPNG from 'assets/images/account.png'\nimport { isValidURL } from 'utils/genericHelper'\n\nexport const ChatMessage = ({ open, chatflowid, isDialog, chatType }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n\n    const ps = useRef()\n\n    const [userInput, setUserInput] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [messages, setMessages] = useState([\n        {\n            message: 'Hi there! How can I help?',\n            type: 'apiMessage'\n        }\n    ])\n    const [socketIOClientId, setSocketIOClientId] = useState('')\n    const [isChatFlowAvailableToStream, setIsChatFlowAvailableToStream] = useState(false)\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\n\n    const inputRef = useRef(null)\n    const getChatmessageApi = useApi(chatmessageApi.getChatmessageFromChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n\n    const onSourceDialogClick = (data) => {\n        setSourceDialogProps({ data })\n        setSourceDialogOpen(true)\n    }\n\n    const onURLClick = (data) => {\n        window.open(data, '_blank')\n    }\n\n    const removeDuplicateURL = (message) => {\n        const visitedURLs = []\n        const newSourceDocuments = []\n        message.sourceDocuments.forEach((source) => {\n            if (isValidURL(source.metadata.source) && !visitedURLs.includes(source.metadata.source)) {\n                visitedURLs.push(source.metadata.source)\n                newSourceDocuments.push(source)\n            } else if (!isValidURL(source.metadata.source)) {\n                newSourceDocuments.push(source)\n            }\n        })\n        return newSourceDocuments\n    }\n\n    const scrollToBottom = () => {\n        if (ps.current) {\n            ps.current.scrollTo({ top: maxScroll })\n        }\n    }\n\n    const onChange = useCallback((e) => setUserInput(e.target.value), [setUserInput])\n\n    const addChatMessage = async (message, type, sourceDocuments) => {\n        try {\n            const newChatMessageBody = {\n                role: type,\n                content: message,\n                chatflowid: chatflowid\n            }\n            if (sourceDocuments) newChatMessageBody.sourceDocuments = JSON.stringify(sourceDocuments)\n            await chatmessageApi.createNewChatmessage(chatflowid, newChatMessageBody)\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    const updateLastMessage = (text) => {\n        setMessages((prevMessages) => {\n            let allMessages = [...cloneDeep(prevMessages)]\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\n            allMessages[allMessages.length - 1].message += text\n            return allMessages\n        })\n    }\n\n    const updateLastMessageSourceDocuments = (sourceDocuments) => {\n        setMessages((prevMessages) => {\n            let allMessages = [...cloneDeep(prevMessages)]\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\n            allMessages[allMessages.length - 1].sourceDocuments = sourceDocuments\n            return allMessages\n        })\n    }\n\n    // Handle errors\n    const handleError = (message = 'Oops! There seems to be an error. Please try again.') => {\n        message = message.replace(`Unable to parse JSON response from chat agent.\\n\\n`, '')\n        setMessages((prevMessages) => [...prevMessages, { message, type: 'apiMessage' }])\n        addChatMessage(message, 'apiMessage')\n        setLoading(false)\n        setUserInput('')\n        setTimeout(() => {\n            inputRef.current?.focus()\n        }, 100)\n    }\n\n    // Handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n\n        if (userInput.trim() === '') {\n            return\n        }\n\n        setLoading(true)\n        setMessages((prevMessages) => [...prevMessages, { message: userInput, type: 'userMessage' }])\n        // waiting for first chatmessage saved, the first chatmessage will be used in sendMessageAndGetPrediction\n        await addChatMessage(userInput, 'userMessage')\n\n        // Send user question and history to API\n        try {\n            const params = {\n                question: userInput,\n                history: messages.filter((msg) => msg.message !== 'Hi there! How can I help?')\n            }\n            if (isChatFlowAvailableToStream) params.socketIOClientId = socketIOClientId\n\n            const response = await predictionApi.sendMessageAndGetPrediction(chatflowid, params)\n\n            if (response.data) {\n                const data = response.data\n                if (typeof data === 'object' && data.text && data.sourceDocuments) {\n                    if (!isChatFlowAvailableToStream) {\n                        setMessages((prevMessages) => [\n                            ...prevMessages,\n                            { message: data.text, sourceDocuments: data.sourceDocuments, type: 'apiMessage' }\n                        ])\n                    }\n                    addChatMessage(data.text, 'apiMessage', data.sourceDocuments)\n                } else {\n                    if (!isChatFlowAvailableToStream) {\n                        setMessages((prevMessages) => [...prevMessages, { message: data, type: 'apiMessage' }])\n                    }\n                    addChatMessage(data, 'apiMessage')\n                }\n                setLoading(false)\n                setUserInput('')\n                setTimeout(() => {\n                    inputRef.current?.focus()\n                    scrollToBottom()\n                }, 100)\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            handleError(errorData)\n            return\n        }\n    }\n\n    // Prevent blank submissions and allow for multiline input\n    const handleEnter = (e) => {\n        // Check if IME composition is in progress\n        const isIMEComposition = e.isComposing || e.keyCode === 229\n        if (e.key === 'Enter' && userInput && !isIMEComposition) {\n            if (!e.shiftKey && userInput) {\n                handleSubmit(e)\n            }\n        } else if (e.key === 'Enter') {\n            e.preventDefault()\n        }\n    }\n\n    // Get chatmessages successful\n    useEffect(() => {\n        if (getChatmessageApi.data) {\n            const loadedMessages = []\n            for (const message of getChatmessageApi.data) {\n                const obj = {\n                    message: message.content,\n                    type: message.role\n                }\n                if (message.sourceDocuments) obj.sourceDocuments = JSON.parse(message.sourceDocuments)\n                loadedMessages.push(obj)\n            }\n            setMessages((prevMessages) => [...prevMessages, ...loadedMessages])\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageApi.data])\n\n    // Get chatflow streaming capability\n    useEffect(() => {\n        if (getIsChatflowStreamingApi.data) {\n            setIsChatFlowAvailableToStream(getIsChatflowStreamingApi.data?.isStreaming ?? false)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getIsChatflowStreamingApi.data])\n\n    // Auto scroll chat to bottom\n    useEffect(() => {\n        scrollToBottom()\n    }, [messages])\n\n    useEffect(() => {\n        if (isDialog && inputRef) {\n            setTimeout(() => {\n                inputRef.current?.focus()\n            }, 100)\n        }\n    }, [isDialog, inputRef])\n\n    useEffect(() => {\n        let socket\n        if (open && chatflowid) {\n            getChatmessageApi.request(chatflowid)\n            getIsChatflowStreamingApi.request(chatflowid)\n            scrollToBottom()\n\n            socket = socketIOClient(baseURL)\n\n            socket.on('connect', () => {\n                setSocketIOClientId(socket.id)\n            })\n\n            socket.on('start', () => {\n                setMessages((prevMessages) => [...prevMessages, { message: '', type: 'apiMessage' }])\n            })\n\n            socket.on('sourceDocuments', updateLastMessageSourceDocuments)\n\n            socket.on('token', updateLastMessage)\n        }\n\n        return () => {\n            setUserInput('')\n            setLoading(false)\n            setMessages([\n                {\n                    message: 'Hi there! How can I help?',\n                    type: 'apiMessage'\n                }\n            ])\n            if (socket) {\n                socket.disconnect()\n                setSocketIOClientId('')\n            }\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open, chatflowid])\n\n    return (\n        <>\n            <div className={isDialog ? 'cloud-dialog' : chatType === 'testchat' ? 'cloud' : 'node-ai'}>\n                <div ref={ps} className='messagelist'>\n                    {messages &&\n                        messages.map((message, index) => {\n                            return (\n                                // The latest message sent by the user will be animated while waiting for a response\n                                    <Box\n                                        sx={{\n                                            background: message.type === 'apiMessage' ? theme.palette.asyncSelect.main : ''\n                                        }}\n                                        key={index}\n                                        style={{ display: 'flex' }}\n                                        className={\n                                            message.type === 'userMessage' && loading && index === messages.length - 1\n                                                ? customization.isDarkMode\n                                                    ? 'usermessagewaiting-dark'\n                                                    : 'usermessagewaiting-light'\n                                                : message.type === 'usermessagewaiting'\n                                                ? 'apimessage'\n                                                : 'usermessage'\n                                        }\n                                    >\n                                        {/* Display the correct icon depending on the message type */}\n                                        {message.type === 'apiMessage' ? (\n                                            <img src={robotPNG} alt='AI' width='30' height='30' className='boticon' />\n                                        ) : (\n                                            <img src={userPNG} alt='Me' width='30' height='30' className='usericon' />\n                                        )}\n                                        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n                                            <div className='markdownanswer'>\n                                                {/* Messages are being rendered in Markdown format */}\n                                                <MemoizedReactMarkdown\n                                                    remarkPlugins={[remarkGfm, remarkMath]}\n                                                    rehypePlugins={[rehypeMathjax]}\n                                                    components={{\n                                                        code({ inline, className, children, ...props }) {\n                                                            const match = /language-(\\w+)/.exec(className || '')\n                                                            return !inline ? (\n                                                                <CodeBlock\n                                                                    key={Math.random()}\n                                                                    chatflowid={chatflowid}\n                                                                    isDialog={isDialog}\n                                                                    language={(match && match[1]) || ''}\n                                                                    value={String(children).replace(/\\n$/, '')}\n                                                                    {...props}\n                                                                />\n                                                            ) : (\n                                                                <code className={className} {...props}>\n                                                                    {children}\n                                                                </code>\n                                                            )\n                                                        }\n                                                    }}\n                                                >\n                                                    {message.message}\n                                                </MemoizedReactMarkdown>\n                                            </div>\n                                            {message.sourceDocuments && (\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                    {removeDuplicateURL(message).map((source, index) => {\n                                                        const URL = isValidURL(source.metadata.source)\n                                                        return (\n                                                            <Chip\n                                                                size='small'\n                                                                key={index}\n                                                                label={\n                                                                    URL\n                                                                        ? URL.pathname.substring(0, 15) === '/'\n                                                                            ? URL.host\n                                                                            : `${URL.pathname.substring(0, 15)}...`\n                                                                        : `${source.pageContent.substring(0, 15)}...`\n                                                                }\n                                                                component='a'\n                                                                sx={{ mr: 1, mb: 1 }}\n                                                                variant='outlined'\n                                                                clickable\n                                                                onClick={() =>\n                                                                    URL ? onURLClick(source.metadata.source) : onSourceDialogClick(source)\n                                                                }\n                                                            />\n                                                        )\n                                                    })}\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Box>\n                            )\n                        })}\n                </div>\n            </div>\n            <Divider />\n            <div className='center'>\n                <div style={{ width: '100%' }}>\n                    <form style={{ width: '100%' }} onSubmit={handleSubmit}>\n                        <OutlinedInput\n                            inputRef={inputRef}\n                            // eslint-disable-next-line\n                            autoFocus\n                            sx={{ width: '100%' }}\n                            // disabled={loading || !chatflowid}\n                            onKeyDown={handleEnter}\n                            id='userInput'\n                            name='userInput'\n                            placeholder={loading ? 'Waiting for response...' : 'Type your question...'}\n                            value={userInput}\n                            onChange={onChange}\n                            multiline={true}\n                            maxRows={isDialog ? 7 : 2}\n                            endAdornment={\n                                <InputAdornment position='end' sx={{ padding: '15px' }}>\n                                    <IconButton type='submit' disabled={loading || !chatflowid} edge='end'>\n                                        {loading ? (\n                                            <div>\n                                                <CircularProgress color='inherit' size={20} />\n                                            </div>\n                                        ) : (\n                                            // Send icon SVG in input field\n                                            <IconSend\n                                                color={loading || !chatflowid ? '#9e9e9e' : customization.isDarkMode ? 'white' : '#1e88e5'}\n                                            />\n                                        )}\n                                    </IconButton>\n                                </InputAdornment>\n                            }\n                        />\n                    </form>\n                </div>\n            </div>\n            <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\n        </>\n    )\n}\n\nChatMessage.propTypes = {\n    open: PropTypes.bool,\n    chatflowid: PropTypes.string,\n    isDialog: PropTypes.bool,\n    chatType: PropTypes.string\n}\n","import { useEffect, useRef, useState, useCallback, useContext } from 'react'\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState } from 'reactflow'\nimport 'reactflow/dist/style.css'\nimport axios from 'axios'\nimport Accordion from '@mui/material/Accordion'\nimport AccordionSummary from '@mui/material/AccordionSummary'\nimport AccordionDetails from '@mui/material/AccordionDetails'\nimport Typography from '@mui/material/Typography'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport { Sidebar, Menu, MenuItem, useProSidebar } from \"react-pro-sidebar\";\nimport HomeOutlinedIcon from \"@mui/icons-material/HomeOutlined\";\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { usePrompt } from '../../utils/usePrompt'\nimport {\n    REMOVE_DIRTY,\n    SET_DIRTY,\n    SET_CHATFLOW,\n    enqueueSnackbar as enqueueSnackbarAction,\n    closeSnackbar as closeSnackbarAction\n} from 'store/actions'\nimport { omit, cloneDeep } from 'lodash'\n\n// material-ui\nimport { Toolbar, Box, AppBar, Button, TextField, Paper, Card } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// project imports\nimport CanvasNode from './CanvasNode'\nimport ButtonEdge from './ButtonEdge'\nimport CanvasHeader from './CanvasHeader'\nimport AddNodes from './AddNodes'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { ChatPopUp } from 'views/chatmessage/ChatPopUp'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\n// API\nimport nodesApi from 'api/nodes'\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\n\n// icons\nimport { IconPlus, IconX } from '@tabler/icons'\n\n// utils\nimport { getUniqueNodeId, initNode, getEdgeLabelName, rearrangeToolsOrdering } from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\n\n// const\nimport { FLOWISE_CREDENTIAL_ID } from 'store/constant'\nimport { ChatMessage } from 'views/chatmessage/ChatMessage'\nimport { StyledFab } from 'ui-component/button/StyledFab'\nimport { ExpandLess } from '@mui/icons-material'\nimport MainCard from 'ui-component/cards/MainCard'\n\nconst nodeTypes = { customNode: CanvasNode }\nconst edgeTypes = { buttonedge: ButtonEdge }\n\n// ==============================|| CANVAS ||============================== //\n\nconst Canvas = () => {\n    const theme = useTheme()\n    const navigate = useNavigate()\n\n    const { state } = useLocation()\n    const templateFlowData = state?.flowDetails ? state.flowDetails : ''\n    const URLpath = document.location.pathname.toString().split('/')\n    console.log(URLpath)\n    const chatflowId = URLpath[URLpath.length - 1] === 'canvas' ? '' : URLpath[URLpath.length - 1]\n\n    const { confirm } = useConfirm()\n\n    const dispatch = useDispatch()\n    const canvas = useSelector((state) => state.canvas)\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\n    const [addNode, setAddNode] = useState(true)\n    const [chatflow, setChatflow] = useState(null)\n    const [openInfoFlow, setOpenInfoFlow] = useState(false)\n\n    const { reactFlowInstance, setReactFlowInstance } = useContext(flowContext)\n    const [allNodeData, setAllNodeData] = useState([])\n\n    const [chatOpen, setChatOpen] = useState(false)\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    // ==============================|| ReactFlow ||============================== //\n\n    const [nodes, setNodes, onNodesChange] = useNodesState()\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\n\n    const [selectedNode, setSelectedNode] = useState(null)\n\n    const reactFlowWrapper = useRef(null)\n\n    // ==============================|| Chatflow API ||============================== //\n\n    const getNodesApi = useApi(nodesApi.getAllNodes)\n    const createNewChatflowApi = useApi(chatflowsApi.createNewChatflow)\n    const createNewChatflowVersion = useApi(chatflowsApi.createNewChatflowVersion)\n    const testChatflowApi = useApi(chatflowsApi.testChatflow)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\n\n    // ==============================|| Events & Actions ||============================== //\n\n    const onConnect = (params) => {\n        const handleType = params.sourceHandle.split('-')[2]\n        const newEdge = {\n            ...params,\n            type: 'buttonedge',\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`,\n            data: { label: getEdgeLabelName(params.sourceHandle) },\n            style:\n                handleType === 'control'\n                    ? {\n                        stroke: 'red',\n                        strokeWidth: 3\n                    }\n                    : {}\n        }\n\n        const targetNodeId = params.targetHandle.split('-')[0]\n        const sourceNodeId = params.sourceHandle.split('-')[0]\n        const targetInput = params.targetHandle.split('-')[2]\n\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === targetNodeId) {\n                    setTimeout(() => setDirty(), 0)\n                    let value\n                    const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\n                    const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\n\n                    if (inputAnchor && inputAnchor.list) {\n                        const newValues = node.data.inputs[targetInput] || []\n                        if (targetInput === 'tools') {\n                            rearrangeToolsOrdering(newValues, sourceNodeId)\n                        } else {\n                            newValues.push(`{{${sourceNodeId}.data.instance}}`)\n                        }\n                        value = newValues\n                    } else if (inputParam && inputParam.acceptVariable) {\n                        value = node.data.inputs[targetInput] || ''\n                    } else {\n                        value = `{{${sourceNodeId}.data.instance}}`\n                    }\n                    node.data = {\n                        ...node.data,\n                        inputs: {\n                            ...node.data.inputs,\n                            [targetInput]: value\n                        }\n                    }\n                }\n                return node\n            })\n        )\n\n        setEdges((eds) => addEdge(newEdge, eds))\n    }\n\n    const handleLoadFlow = (file) => {\n        try {\n            // const flowData = JSON.parse(file)\n            // const nodes = flowData.nodes || []\n            // setNodes(nodes)\n            // setEdges(flowData.edges || [])\n            file?.flowData?.nodes?.forEach((node) => {\n                let createNode = { id: node?.id, position: node.position, type: 'customNode', data: node?.data }\n                setNodes((nds) => nds.concat(createNode))\n            })\n\n            file?.flowData?.edges?.forEach((edge) => {\n                let createEdge = { id: edge.id, type: edge.type, source: edge.source, target: edge.target, sourceHandle: edge.sourceHandle, targetHandle: edge.targetHandle }\n                setEdges((eds) => addEdge(createEdge, eds))\n            })\n            // setDirty()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const handleDeleteFlow = async () => {\n        const confirmPayload = {\n            title: `Delete`,\n            description: `Delete chatflow ${chatflow.name}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                await chatflowsApi.deleteChatflow(chatflow.id)\n                navigate(-1)\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const handleSaveFlow = (chatflowName) => {\n        console.log(chatflowName);\n        if (reactFlowInstance) {\n            const nodes = reactFlowInstance.getNodes().map((node) => {\n                const nodeData = cloneDeep(node.data)\n                if (Object.prototype.hasOwnProperty.call(nodeData.inputs, FLOWISE_CREDENTIAL_ID)) {\n                    nodeData.credential = nodeData.inputs[FLOWISE_CREDENTIAL_ID]\n                    nodeData.inputs = omit(nodeData.inputs, [FLOWISE_CREDENTIAL_ID])\n                }\n                node.data = {\n                    ...nodeData,\n                    selected: false\n                }\n                return node\n            })\n\n            const rfInstanceObject = reactFlowInstance.toObject()\n            rfInstanceObject.nodes = nodes\n            const flowData = rfInstanceObject\n\n            if (!chatflow.id) {\n                const newChatflowBody = {\n                    displayName: chatflowName,\n                    deployed: false,\n                    isPublic: false,\n                    flowData\n                }\n                createNewChatflowApi.request(newChatflowBody);\n\n            } else {\n                const updateBody = {\n                    name: chatflowName,\n                    flowData\n                }\n                updateChatflowApi.request(chatflow.id, updateBody)\n            }\n        }\n    }\n\n    // eslint-disable-next-line\n    const onNodeClick = useCallback((event, clickedNode) => {\n        setSelectedNode(clickedNode)\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === clickedNode.id) {\n                    node.data = {\n                        ...node.data,\n                        selected: true\n                    }\n                } else {\n                    node.data = {\n                        ...node.data,\n                        selected: false\n                    }\n                }\n\n                return node\n            })\n        )\n    })\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault()\n        event.dataTransfer.dropEffect = 'move'\n    }, [])\n\n    const onDrop = useCallback(\n        (event) => {\n            event.preventDefault()\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\n            let nodeData = event.dataTransfer.getData('application/reactflow')\n            // check if the dropped element is valid\n            if (typeof nodeData === 'undefined' || !nodeData) {\n                return\n            }\n\n            nodeData = JSON.parse(nodeData)\n\n\n            const position = reactFlowInstance.project({\n                x: event.clientX - reactFlowBounds.left - 100,\n                y: event.clientY - reactFlowBounds.top - 50\n            })\n\n            const newNodeId = getUniqueNodeId(nodeData, reactFlowInstance.getNodes())\n\n            const newNode = {\n                id: newNodeId,\n                position,\n                type: 'customNode',\n                data: initNode(nodeData, newNodeId)\n            }\n\n            setSelectedNode(newNode)\n            setNodes((nds) =>\n                nds.concat(newNode).map((node) => {\n                    if (node.id === newNode.id) {\n                        node.data = {\n                            ...node.data,\n                            selected: true\n                        }\n                    } else {\n                        node.data = {\n                            ...node.data,\n                            selected: false\n                        }\n                    }\n\n                    return node\n                })\n            )\n            setTimeout(() => setDirty(), 0)\n        },\n\n        // eslint-disable-next-line\n        [reactFlowInstance]\n    )\n\n    const saveChatflowSuccess = () => {\n        dispatch({ type: REMOVE_DIRTY })\n        enqueueSnackbar({\n            message: 'Chatflow saved',\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'success',\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const errorFailed = (message) => {\n        enqueueSnackbar({\n            message,\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'error',\n                persist: true,\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const setDirty = () => {\n        dispatch({ type: SET_DIRTY })\n    }\n\n    const openChatBox = () => {\n        setChatOpen(!chatOpen)\n    }\n\n    const infoHandle = () => {\n        setOpenInfoFlow(true)\n    }\n\n    const agentFlowHandle = () => {\n        setOpenInfoFlow(false)\n    }\n\n    // ==============================|| useEffect ||============================== //\n\n    // Get specific chatflow successful\n    useEffect(() => {\n        if (getSpecificChatflowApi.data) {\n            const chatflow = getSpecificChatflowApi.data\n            const initialFlow = chatflow.flowData ? JSON.parse(chatflow.flowData) : []\n            setNodes(initialFlow.nodes || [])\n            setEdges(initialFlow.edges || [])\n            dispatch({ type: SET_CHATFLOW, chatflow })\n        } else if (getSpecificChatflowApi.error) {\n            const error = getSpecificChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to retrieve chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getSpecificChatflowApi.data, getSpecificChatflowApi.error])\n\n    // Create new chatflow successful\n    useEffect(() => {\n        if (createNewChatflowApi.data) {\n            const chatflow = createNewChatflowApi.data\n            dispatch({ type: SET_CHATFLOW, chatflow })\n            saveChatflowSuccess()\n            window.history.replaceState(null, null, `/canvas/${chatflow.id}`)\n        } else if (createNewChatflowApi.error) {\n            const error = createNewChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [createNewChatflowApi.data, createNewChatflowApi.error])\n\n    // Update chatflow successful\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n            saveChatflowSuccess()\n        } else if (updateChatflowApi.error) {\n            const error = updateChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updateChatflowApi.data, updateChatflowApi.error])\n\n    // Test chatflow failed\n    useEffect(() => {\n        if (testChatflowApi.error) {\n            enqueueSnackbar({\n                message: 'Test chatflow failed',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [testChatflowApi.error])\n\n    useEffect(() => setChatflow(canvasDataStore.chatflow), [canvasDataStore.chatflow])\n\n    // Initialization\n    useEffect(() => {\n        if (chatflowId) {\n            getSpecificChatflowApi.request(chatflowId)\n        } else {\n            if (localStorage.getItem('duplicatedFlowData')) {\n                handleLoadFlow(localStorage.getItem('duplicatedFlowData'))\n                setTimeout(() => localStorage.removeItem('duplicatedFlowData'), 0)\n            } else {\n                setNodes([])\n                setEdges([])\n            }\n            dispatch({\n                type: SET_CHATFLOW,\n                chatflow: {\n                    name: 'Untitled chatflow'\n                }\n            })\n        }\n\n        // getNodesApi.request()\n        getNodesApi.request()\n\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\n        return () => {\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    console.log(getNodesApi)\n\n    useEffect(() => {\n        setCanvasDataStore(canvas)\n    }, [canvas])\n\n    useEffect(() => {\n        function handlePaste(e) {\n            const pasteData = e.clipboardData.getData('text')\n            //TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\n            if (pasteData.includes('{\"nodes\":[') && pasteData.includes('],\"edges\":[')) {\n                handleLoadFlow(pasteData)\n            }\n        }\n\n        window.addEventListener('paste', handlePaste)\n\n        return () => {\n            window.removeEventListener('paste', handlePaste)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (templateFlowData) {\n            handleLoadFlow(templateFlowData)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [templateFlowData])\n\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\n\n    return (\n        <>\n            <Box>\n                {/* <AppBar\n                    enableColorOnDark\n                    color='inherit'\n                    elevation={1}\n                    sx={{\n                        top: '56px',\n                        height: '54px',\n                        bgcolor: theme.palette.background.default\n                    }}\n                > */}\n                    <Toolbar  sx={{\n                      \n                      border: '1px solid lightgrey'\n                    }} >\n                        <CanvasHeader \n                            chatflow={chatflow}\n                            handleSaveFlow={handleSaveFlow}\n                            handleDeleteFlow={handleDeleteFlow}\n                            handleLoadFlow={handleLoadFlow}\n                            openChatBox={openChatBox}\n                            templateFlowData={templateFlowData}\n                            agentflowName={state?.agetWorkFlowValue}\n                        />\n                    </Toolbar>\n                {/* </AppBar> */}\n                {/* <Box sx={{\n             \n                    height: '100vh',\n                    width: '5%',\n                    position: 'absolute',\n                    zIndex: '300',\n                    border: '1px solid lightgrey'\n                }}>\n                    <Menu>\n                        <MenuItem icon={<HomeOutlinedIcon />} onClick={agentFlowHandle}></MenuItem>\n                        <MenuItem icon={<InfoIcon />} onClick={infoHandle}></MenuItem>\n                    </Menu>\n                </Box> */}\n                {openInfoFlow && <Box className='box-inline' sx={{  height: '100vh', width: '100%',  position: 'fixed', left: '5%' }}>\n\n                </Box>}\n                {addNode && !openInfoFlow ? (\n                    <Box\n                        className='box-inline'\n                        sx={{\n                          \n                            height: '100vh',\n                            width: '20%',\n                            zIndex: '300',\n                            // left:\n                            border: '1px solid lightgrey'\n                        }}\n                    >\n                        <Paper sx={{ height: '90vh' }}>\n                            <AddNodes nodesData={getNodesApi?.data} node={selectedNode} setAddNode={setAddNode} />\n                        </Paper>\n                    </Box>\n                ) : !openInfoFlow && (\n                    <Box\n                        className='box-inline'\n                        sx={{\n\n                            position: 'fixed',\n\n                            zIndex: '300'\n                        }}\n                    >\n                        {' '}\n                        <StyledFab\n                            sx={{ left: 20, top: 8 }}\n                            size='small'\n                            aria-label='add'\n                            title='Add Node'\n                            variant='extended'\n                            onClick={() => {\n                                setAddNode(true)\n                            }}\n                        >\n                            <IconPlus /> Add Nodes\n                        </StyledFab>\n                    </Box>\n                )}\n                {\n                    !openInfoFlow && <Box className='box-inline' sx={{ height: '100vh', width: '100%', position: 'fixed' }}>\n                        <div className='reactflow-parent-wrapper'>\n                            <div className='reactflow-wrapper' ref={reactFlowWrapper}>\n                                <ReactFlow\n                                    nodes={nodes}\n                                    edges={edges}\n                                    onNodesChange={onNodesChange}\n                                    onNodeClick={onNodeClick}\n                                    onEdgesChange={onEdgesChange}\n                                    onDrop={onDrop}\n                                    onDragOver={onDragOver}\n                                    onNodeDragStop={setDirty}\n                                    nodeTypes={nodeTypes}\n                                    edgeTypes={edgeTypes}\n                                    onConnect={onConnect}\n                                    onInit={setReactFlowInstance}\n                                    fitView\n                                    deleteKeyCode={canvas.canvasDialogShow ? null : ['Backspace', 'Delete']}\n                                    minZoom={0.1}\n                                    maxZoom={1.2}\n                                >\n                                    <Controls\n                                    // position='top-center'\n                                    // style={{\n                                    //     display: 'flex',\n                                    //     flexDirection: 'row',\n                                    //     left: '50%',\n                                    //     transform: 'translate(-50%, -50%)'\n                                    // }}\n                                    />\n                                    <Background color='#aaa' gap={16} />\n                                    <div className='node-ai-chat'>\n                                        <Accordion>\n                                            <AccordionSummary\n                                                sx={{ backgroundColor: 'gainsboro' }}\n                                                expandIcon={<ExpandLess />}\n                                                aria-controls='panel1a-content'\n                                                id='panel1a-header'\n                                            >\n                                                <Typography>Update Flow Through AI</Typography>\n                                            </AccordionSummary>\n                                            <AccordionDetails sx={{ border: '1px solid lightgray', padding: '0px', position: \"relative\", top: \"-283px\" }}>\n                                                <Paper>\n                                                    <ChatMessage chatType='nodeai' />\n                                                </Paper>\n                                            </AccordionDetails>\n                                        </Accordion>\n                                    </div>\n                                    {/* <ChatPopUp chatflowid={chatflowId} /> */}\n                                </ReactFlow>\n                            </div>\n                        </div>\n                    </Box>\n                }\n                {chatOpen && (\n                    <Box\n                        className='box-inline'\n                        sx={{\n\n                            height: '100vh',\n                            width: '25%',\n                            position: 'absolute',\n\n                            border: '1px solid lightgrey'\n                        }}\n                    >\n                        <Paper>\n                            <ChatMessage chatType='testchat' />\n                        </Paper>\n                    </Box>\n                )}\n                <ConfirmDialog />\n            </Box >\n        </>\n    )\n}\n\nexport default Canvas\n"],"names":["getAllChatflows","client","get","createNewChatflowVersion","id","body","post","concat","getSpecificChatflow","getSpecificChatflowFromPublicEndpoint","createNewChatflow","updateChatflow","put","deleteChatflow","delete","getIsChatflowStreaming","usePrompt","message","when","arguments","length","undefined","blocker","navigator","useContext","NavigationContext","useEffect","unblock","block","tx","autoUnblockingTx","retry","useBlocker","useCallback","window","confirm","_ref","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","data","markerEnd","edgePath","edgeCenterX","edgeCenterY","getBezierPath","deleteEdge","flowContext","dispatch","useDispatch","_jsxs","_Fragment","children","_jsx","className","d","label","EdgeText","x","y","labelStyle","fill","labelBgStyle","labelBgPadding","labelBgBorderRadius","width","height","foreignObjectSize","requiredExtensions","onClick","event","onEdgeClick","evt","stopPropagation","type","SET_DIRTY","show","dialogProps","onCancel","onConfirm","portalElement","setPortalElement","useState","chatflowName","setChatflowName","isReadyToSave","setIsReadyToSave","document","getElementById","component","Dialog","open","fullWidth","maxWidth","onClose","DialogTitle","sx","fontSize","title","DialogContent","OutlinedInput","mt","placeholder","value","onChange","e","target","DialogActions","Button","cancelButtonName","StyledButton","disabled","variant","confirmButtonName","createPortal","defaultConfig","backgroundColor","textColor","sendButtonColor","_chatflow$isPublic","_chatbotConfig$genera","_chatbotConfig$welcom","_chatbotConfig$backgr","_chatbotConfig$fontSi","_chatbotConfig$powere","_chatbotConfig$botMes","_chatbotConfig$botMes2","_chatbotConfig$botMes3","_chatbotConfig$botMes4","_chatbotConfig$botMes5","_chatbotConfig$botMes6","_chatbotConfig$botMes7","_chatbotConfig$botMes8","_chatbotConfig$userMe","_chatbotConfig$userMe2","_chatbotConfig$userMe3","_chatbotConfig$userMe4","_chatbotConfig$userMe5","_chatbotConfig$userMe6","_chatbotConfig$userMe7","_chatbotConfig$userMe8","_chatbotConfig$textIn","_chatbotConfig$textIn2","_chatbotConfig$textIn3","_chatbotConfig$textIn4","_chatbotConfig$textIn5","_chatbotConfig$textIn6","_chatbotConfig$textIn7","_chatbotConfig$textIn8","isSessionMemory","theme","useTheme","chatflow","useSelector","state","canvas","chatflowid","chatbotConfig","JSON","parse","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","isPublicChatflow","setChatflowIsPublic","isPublic","generateNewSession","setGenerateNewSession","welcomeMessage","setWelcomeMessage","setBackgroundColor","setFontSize","poweredByTextColor","setPoweredByTextColor","botMessageBackgroundColor","setBotMessageBackgroundColor","botMessage","botMessageTextColor","setBotMessageTextColor","botMessageAvatarSrc","setBotMessageAvatarSrc","avatarSrc","botMessageShowAvatar","setBotMessageShowAvatar","showAvatar","userMessageBackgroundColor","setUserMessageBackgroundColor","userMessage","userMessageTextColor","setUserMessageTextColor","userMessageAvatarSrc","setUserMessageAvatarSrc","userMessageShowAvatar","setUserMessageShowAvatar","textInputBackgroundColor","setTextInputBackgroundColor","textInput","textInputTextColor","setTextInputTextColor","textInputPlaceholder","setTextInputPlaceholder","textInputSendButtonColor","setTextInputSendButtonColor","colorAnchorEl","setColorAnchorEl","selectedColorConfig","setSelectedColorConfig","sketchPickerColor","setSketchPickerColor","openColorPopOver","Boolean","copyAnchorEl","setCopyAnchorEl","openCopyPopOver","formatObj","obj","overrideConfig","handleCloseCopyPopOver","colorField","color","fieldName","fieldLabel","Box","pt","pb","display","flexDirection","alignItems","Typography","mb","cursor","border","marginRight","borderRadius","currentTarget","booleanField","Switch","checked","onBooleanChanged","textField","fieldType","name","onTextChanged","Stack","direction","p","palette","primary","light","baseURL","IconButton","clipboard","writeText","setTimeout","IconCopy","IconArrowUpRightCircle","flex","async","saveResp","chatflowsApi","options","key","Date","getTime","Math","random","action","IconX","SET_CHATFLOW","error","console","errorData","response","status","statusText","persist","onSwitchChange","TooltipWithParser","marginLeft","marginBottom","marginTop","stringify","onSave","Popover","anchorEl","handleClosePopOver","anchorOrigin","vertical","horizontal","transformOrigin","SketchPicker","hexColor","onColorSelected","hex","pl","pr","background","success","dark","CheckboxInput","myValue","setMyValue","FormControlLabel","size","control","Checkbox","TabPanel","props","index","other","role","hidden","a11yProps","buttonConfig","chatwindowConfig","codes","setValue","embedChatCheckboxVal","setEmbedChatCheckbox","onCheckBoxEmbedChatChanged","newVal","getCode","codeLang","embedPopupHtmlCode","embedFullpageHtmlCode","embedPopupReactCode","embedFullpageReactCode","getCodeCustomization","embedPopupHtmlCodeCustomization","embedFullpageHtmlCodeCustomization","embedPopupReactCodeCustomization","embedFullpageReactCodeCustomization","Tabs","handleChange","newValue","map","Tab","rel","href","CopyBlock","atomOneDark","text","language","showLineNumbers","wrapLines","getAllAPIKeys","unshiftFiles","configData","filesConfig","find","config","filter","unshift","getConfigExamplesForJS","bodyType","finalStr","loop","min","i","exampleVal","getConfigExamplesForPython","getConfigExamplesForCurl","_ref2","_dialogProps$chatflow","navigate","useNavigate","keyOptions","setKeyOptions","apiKeys","setAPIKeys","chatflowApiKeyId","setChatflowApiKeyId","selectedApiKey","setSelectedApiKey","checkboxVal","setCheckbox","nodeConfig","setNodeConfig","nodeConfigExpanded","setNodeConfigExpanded","getAllAPIKeysApi","useApi","apiKeyApi","updateChatflowApi","getIsChatflowStreamingApi","getConfigApi","configApi","getConfig","onCheckBoxChanged","request","handleAccordionChange","nodeLabel","isExpanded","accordianNodes","nodes","isFilter","result","reduce","r","a","node","push","Object","create","groupByNodeLabel","getCodeWithAuthorization","apiKey","getLang","getSVG","pythonSVG","javascriptSVG","EmbedSVG","cURLSVG","ShareChatbotSVG","getConfigCodeWithFormData","fileType","getConfigCodeWithFormDataWithAuth","getConfigCode","getConfigCodeWithAuthorization","getMultiConfigCodeWithFormData","keyName","icon","objectFit","src","alt","iconPosition","Dropdown","disableClearable","onSelect","keyValue","updateBody","apikeyid","onApiKeySelected","_getIsChatflowStreami","EmbedChat","keys","sort","Accordion","expanded","disableGutters","AccordionSummary","expandIcon","ExpandMoreIcon","padding","paddingLeft","paddingRight","nodeId","AccordionDetails","TableViewOnly","rows","columns","slice","isFormDataRequired","IconBulb","fontWeight","isStreaming","ShareChatbot","StyledFab","styled","Fab","main","backgroundImage","handleSaveFlow","handleDeleteFlow","handleLoadFlow","openChatBox","templateFlowData","agentflowName","flowNameRef","useRef","isEditingFlowName","setEditingFlowName","flowName","setFlowName","isSettingsOpen","setSettingsOpen","flowDialogOpen","setFlowDialogOpen","apiDialogOpen","setAPIDialogOpen","apiDialogProps","setAPIDialogProps","ButtonBase","Avatar","typography","commonAvatar","mediumAvatar","transition","secondary","history","idx","replace","IconChevronLeft","stroke","flexGrow","justifyContent","ml","isDirty","orange","IconPencil","TextField","inputRef","defaultValue","submitFlowName","current","IconCheck","mr","canvasHeader","deployLight","deployDark","onAPIDialogClick","flowData","inputParams","param","IconCode","onSaveChatflowClick","IconDeviceFloppy","QuizIcon","PushPin","SaveChatflowDialog","APICodeDialog","Transitions","forwardRef","ref","position","others","positionSX","Grow","Collapse","Fade","timeout","appear","enter","exit","Slide","Zoom","defaultProps","nodesData","setAddNode","customization","searchValue","setSearchValue","setNodes","setOpen","categoryExpanded","setCategoryExpanded","addNodeValue","setAddNodeValue","openCreateNodeModal","setOpenCreateNodeModal","React","anchorRef","prevOpen","ps","scrollTop","curr","filterSearch","returnData","nd","passesQuery","toLowerCase","includes","passesCategory","category","getSearchedNodes","groupByCategory","accordianCategories","log","focus","SET_COMPONENT_NODES","componentNodes","ToolCreateModal","CloseIcon","px","my","startAdornment","InputAdornment","IconSearch","grey","endAdornment","inputProps","Divider","handleNodeAI","PerfectScrollbar","containerRef","el","maxHeight","overflowX","List","py","breakpoints","down","top","onDragStart","dataTransfer","setData","effectAllowed","draggable","ListItemButton","ListItem","ListItemAvatar","displayName","logoUrl","ListItemText","description","programmingLanguages","javascript","python","java","c","cpp","ruby","php","swift","kotlin","typescript","go","perl","rust","scala","haskell","lua","shell","sql","html","css","CodeBlock","memo","_theme$palette","isDialog","setAnchorEl","openPopOver","common","borderTopLeftRadius","borderTopRightRadius","IconClipboard","downloadAsFile","fileExtension","fileName","blob","Blob","url","URL","createObjectURL","link","createElement","download","appendChild","click","removeChild","revokeObjectURL","IconDownload","SyntaxHighlighter","oneDark","customStyle","margin","MemoizedReactMarkdown","ReactMarkdown","prevProps","nextProps","createNewChatmessage","sendMessageAndGetPrediction","input","ChatMessage","chatType","userInput","setUserInput","loading","setLoading","messages","setMessages","socketIOClientId","setSocketIOClientId","isChatFlowAvailableToStream","setIsChatFlowAvailableToStream","sourceDialogOpen","setSourceDialogOpen","sourceDialogProps","setSourceDialogProps","getChatmessageApi","chatmessageApi","removeDuplicateURL","visitedURLs","newSourceDocuments","sourceDocuments","forEach","source","isValidURL","metadata","scrollToBottom","scrollTo","maxScroll","addChatMessage","newChatMessageBody","content","updateLastMessage","prevMessages","allMessages","cloneDeep","updateLastMessageSourceDocuments","handleSubmit","preventDefault","trim","params","question","msg","predictionApi","_inputRef$current2","_inputRef$current","handleError","loadedMessages","_getIsChatflowStreami2","_inputRef$current3","socket","socketIOClient","on","disconnect","asyncSelect","isDarkMode","robotPNG","userPNG","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeMathjax","components","code","inline","match","exec","String","Chip","pathname","substring","host","pageContent","clickable","onSourceDialogClick","onSubmit","autoFocus","onKeyDown","isIMEComposition","isComposing","keyCode","shiftKey","multiline","maxRows","edge","CircularProgress","IconSend","SourceDocDialog","nodeTypes","customNode","CanvasNode","edgeTypes","buttonedge","ButtonEdge","Canvas","useLocation","flowDetails","URLpath","location","toString","split","chatflowId","useConfirm","canvasDataStore","setCanvasDataStore","addNode","setChatflow","openInfoFlow","setOpenInfoFlow","reactFlowInstance","setReactFlowInstance","allNodeData","setAllNodeData","chatOpen","setChatOpen","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","selectedNode","setSelectedNode","reactFlowWrapper","getNodesApi","nodesApi","getAllNodes","createNewChatflowApi","testChatflowApi","testChatflow","getSpecificChatflowApi","file","_file$flowData","_file$flowData$nodes","_file$flowData2","_file$flowData2$edges","createNode","nds","createEdge","sourceHandle","targetHandle","eds","addEdge","onNodeClick","clickedNode","selected","onDragOver","dropEffect","onDrop","reactFlowBounds","getBoundingClientRect","nodeData","getData","project","clientX","left","clientY","newNodeId","getUniqueNodeId","getNodes","newNode","initNode","setDirty","saveChatflowSuccess","REMOVE_DIRTY","errorFailed","initialFlow","replaceState","localStorage","getItem","removeItem","handlePaste","pasteData","clipboardData","addEventListener","removeEventListener","Toolbar","CanvasHeader","prototype","hasOwnProperty","call","inputs","FLOWISE_CREDENTIAL_ID","credential","omit","rfInstanceObject","toObject","newChatflowBody","deployed","confirmPayload","agetWorkFlowValue","zIndex","Paper","AddNodes","IconPlus","ReactFlow","onNodeDragStop","onConnect","handleType","newEdge","getEdgeLabelName","strokeWidth","targetNodeId","sourceNodeId","targetInput","inputAnchor","inputAnchors","ancr","inputParam","list","newValues","rearrangeToolsOrdering","acceptVariable","onInit","fitView","deleteKeyCode","canvasDialogShow","minZoom","maxZoom","Controls","Background","gap","ExpandLess","ConfirmDialog"],"sourceRoot":""}